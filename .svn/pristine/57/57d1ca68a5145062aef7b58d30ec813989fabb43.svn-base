package kr.or.ddit.controller_DO;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import kr.or.ddit.mapper.UserMapper;
import kr.or.ddit.service_DO.FreeBoardService;
import kr.or.ddit.service_DO.NoticeService;
import kr.or.ddit.util.ArticlePage;
import kr.or.ddit.vo.BoardVO;
import kr.or.ddit.vo.CodeVO;
import kr.or.ddit.vo.CommentVO;
import lombok.extern.slf4j.Slf4j;


@RequestMapping("/common/freeBoard")
@Controller
@Slf4j
public class ComFreeController {

	@Inject
	FreeBoardService freeBoardService;
	
	@Autowired
	UserMapper userMapper;
	
	@RequestMapping(value="/freeList", method=RequestMethod.GET)
	public ModelAndView admList(ModelAndView mav,
	        @RequestParam(value="currentPage", required=false, defaultValue="1") int currentPage,
	        @RequestParam(value="pstOthbcscope", required=false, defaultValue="") String pstOthbcscope,
	        @RequestParam(value="searchKeyword", required=false, defaultValue="") String searchKeyword) {

		
	    Map<String, Object> map = new HashMap<>();
	    map.put("currentPage", currentPage);
	    map.put("pstOthbcscope", pstOthbcscope);
	    map.put("searchKeyword", "%" + searchKeyword + "%"); 

	    log.info("list->map : " + map);
	    
	    List<BoardVO> boardVOList = this.freeBoardService.admList(map);
	    
	    int total = this.freeBoardService.getTotal(map);
	    
	    // JSP로 전달하기 위해 Model 객체에 boardVOList 저장
	    mav.addObject("boardVOList", boardVOList);

	    // 페이지네이션 객체
	    ArticlePage<BoardVO> articlePage = new ArticlePage<>(total, currentPage, 10, boardVOList, pstOthbcscope);
	    log.info("articlePage : " + articlePage);
        // 로그인한 사용자 ID 가져오기
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String mbrId = authentication.getName();
        mav.addObject("loggedInUser", mbrId);
	    mav.addObject("articlePage", articlePage);
	    mav.setViewName("common/freeBoard/freeList");

	    return mav;
	}
	
	@GetMapping("/freeRegist")
	public String regist(Model model) {
	    List<CodeVO> codeVOList = userMapper.codeSelect("FBOD");
	    log.info("codeVOList", codeVOList);
	    
	    model.addAttribute("codeVOList", codeVOList);
	    
	    return "common/freeBoard/freeRegist";
	}

	
	@PostMapping("/freeRegistPost")
	public String registPost(@ModelAttribute BoardVO boardVO) {
	    // 로그인한 사용자 정보 가져오기
	    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    String mbrId = authentication.getName();  // 로그인한 사용자 이름 (id)
	    
	    // boardVO의 작성자(writer) 필드에 로그인한 사용자 설정
	    boardVO.setMbrId(mbrId);
	    
	    log.info("registPost->boardVO : " + boardVO);
	    int result = this.freeBoardService.admRegistPost(boardVO);
	    log.info("registPost->result : " + result);
	    
	    return "redirect:/common/freeBoard/freeDetail?seNo=3"+ "&pstSn=" + boardVO.getPstSn();
	}
	
	@GetMapping("/freeDetail")
	public String detail(@RequestParam("pstSn") String pstSn, Model model) {
	    log.info("detail=> getpstSn : "+pstSn);
	    List<CodeVO> codeVOList = userMapper.codeSelect("WARN");
	    log.info("codeVOList", codeVOList);
	    
	    model.addAttribute("codeVOList", codeVOList);
	    // 조회수 증가 호출
	    this.freeBoardService.InqCnt(pstSn);

	    // 상세정보 가져오기
	    BoardVO boardVO = this.freeBoardService.admDetail(pstSn);
	    model.addAttribute("boardVO", boardVO);
	    
	    // 댓글 목록 가져오기
	    List<CommentVO> commentsList = this.freeBoardService.getComments(pstSn);
	    model.addAttribute("commentsList", commentsList);

        // 로그인한 사용자 ID 가져오기
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String mbrId = authentication.getName();
        model.addAttribute("loggedInUser", mbrId);
	    
	    return "common/freeBoard/freeDetail";  
	}
	
	@PostMapping("/registReplyPost")
	public String registReplyPost(@RequestParam("commentContent") String commentContent, @RequestParam("pstSn") String pstSn) {
	    // 로그인한 사용자 정보 가져오기
	    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    String mbrId = authentication.getName();  // 로그인한 사용자 이름 (id)

	    // 댓글 등록 VO 객체 생성
	    CommentVO commentVO = new CommentVO();
	    commentVO.setCmntCn(commentContent);
	    commentVO.setPstSn(pstSn);
	    commentVO.setMbrId(mbrId);
	    commentVO.setCmntDelYn("1");

	    // 댓글 등록
	    int result = this.freeBoardService.registComment(commentVO);
	    log.info("registReplyPost->result : " + result);

	    // 댓글 등록 후 상세로 이동
	    return "redirect:/common/freeBoard/freeDetail?pstSn=" + pstSn;
	}
    @PostMapping("/updateComment")
    @ResponseBody
    public String updateComment(@RequestBody CommentVO commentVO) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String mbrId = authentication.getName();

        // 댓글 수정 처리
        commentVO.setMbrId(mbrId);
        int result = this.freeBoardService.updateComment(commentVO);
        return result > 0 ? "success" : "fail";
    }
    
    @PostMapping("/deleteComment")
    @ResponseBody
    public String deleteComment(@RequestParam("cmntNo") String cmntNo, @RequestParam("pstSn") String pstSn) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String mbrId = authentication.getName();

        // 댓글 삭제 처리
        int result = this.freeBoardService.deleteComment(cmntNo, pstSn, mbrId);
        return result > 0 ? "success" : "fail";
    }
    
	@PostMapping("/deletePost")
	public String deletePost(@RequestParam("pstSn") String pstSn) {
	    log.info("deletePost -> getpstSn : " + pstSn);
	    
	    // 게시글 삭제
	    int result = freeBoardService.deletePost(pstSn); // 서비스에서 게시글 삭제
	    if (result > 0) {
	        log.info("게시글 삭제 성공");
	    } else {
	        log.info("게시글 삭제 실패");
	    }
	    
	    return "redirect:/common/freeBoard/freeList"; // 삭제 후 목록 페이지로 리디렉션
	}
	
	@GetMapping("/freeUpdate")
	public String update(@RequestParam("pstSn") String pstSn, Model model) {
	    log.info("update => get pstSn : " + pstSn);
	    List<CodeVO> codeVOList = userMapper.codeSelect("FBOD");
	    log.info("codeVOList", codeVOList);
	    
	    // 게시글 상세 정보 가져오기
	    BoardVO boardVO = this.freeBoardService.getPostDetails(pstSn);
	    model.addAttribute("boardVO", boardVO);
	    model.addAttribute("codeVOList", codeVOList);

	    return "common/freeBoard/freeUpdate";  // 수정 페이지로 이동
	}
	
	@PostMapping("/updatePost")
	public String updatePost(@ModelAttribute BoardVO boardVO) {
	    log.info("updatePost -> boardVO : " + boardVO);

	    // 수정된 데이터 업데이트
	    int result = this.freeBoardService.updatePost(boardVO);
	    
	    // 수정된 게시글의 세부정보 페이지로 리디렉션
	    return "redirect:/common/freeBoard/freeDetail?seNo=3&pstSn=" + boardVO.getPstSn();

	}
}
