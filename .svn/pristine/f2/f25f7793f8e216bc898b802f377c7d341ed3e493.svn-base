package kr.or.ddit.oustou.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.mapper.OutsouMapper;
import kr.or.ddit.mapper.UserMapper;
import kr.or.ddit.oustou.controller.OutsouController;
import kr.or.ddit.oustou.service.OutsouService;
import kr.or.ddit.util.UploadController;
import kr.or.ddit.vo.CodeVO;
import kr.or.ddit.vo.FileDetailVO;
import kr.or.ddit.vo.OsClVO;
import kr.or.ddit.vo.OsDevalVO;
import kr.or.ddit.vo.OsKeywordVO;
import kr.or.ddit.vo.OsdeCludVO;
import kr.or.ddit.vo.OsdeDatabaseVO;
import kr.or.ddit.vo.OsdeLangVO;
import kr.or.ddit.vo.OutsouVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class OutsouServiceImpl implements OutsouService {
	
	@Inject
	OutsouMapper outsouMapper;
	
	//서비스 게시판 번호를 가져오기 위함
	@Autowired
	OutsouController outsouController; 
	
	//파일 처리를 위한 
	@Autowired
	UploadController uploadController;
	
	//<!--  외주 등록  -->
	@Transactional
	@Override
	public int  registPostAjax(OutsouVO outsouVO) {
		//이미지 저장 
		//0. 메인 이미지 처리 
		MultipartFile[] multipartFiles = outsouVO.getMainFile();
		log.info("multipartFiles == > " + multipartFiles);
		//1. 상세이미지 처리
		MultipartFile[] multipartFiles2 = outsouVO.getDetailFile();
		log.info("multipartFiles2 == > " + multipartFiles2);
		
		// 메인 이미지
		if (multipartFiles == null || multipartFiles.length == 0 || multipartFiles[0].isEmpty()) {
		    log.info("새로운 파일이 업로드되지 않았습니다. 세팅 안해");
		    outsouVO.setOutordMainFile("2"); // fileGroupNo의 값을 세팅
		} else {
		    // 새로운 파일 업로드 처리
		    String fileGroupSn = this.uploadController.multiImageUpload(multipartFiles, "/outsou/mainFile");
		    log.info("mainFile->fileGroupSn : " + fileGroupSn);
		    outsouVO.setOutordMainFile(fileGroupSn); // fileGroupNo의 값을 세팅
		}

		// 상세 이미지
		if (multipartFiles2 == null || multipartFiles2.length == 0 || multipartFiles2[0].isEmpty()) { 
		    log.info("새로운 파일이 업로드되지 않았습니다. 세팅 안해");
		    outsouVO.setOutordDetailFile("0");
		} else {
		    // 새로운 파일 업로드 처리
		    String fileGroupSn = this.uploadController.multiImageUpload(multipartFiles2, "/outsou/detailFile");
		    log.info("outsou->fileGroupSn : " + fileGroupSn);
		    outsouVO.setOutordDetailFile(fileGroupSn);
		}
		//정보 저장 
		/*
		 [1.IT프로그래밍]->OUTSOU, OS_DEVAL, OS_KEYWOED
		 OutsouVO(outordNo=null, outordLclsf=OULC01, outordMlsfc=OULC01-002, outordTtl=1, ..., 
		 	osDevalVO=OsDevalVO(srvcNo=null, outordNo=null, srvcLevelCd=SRLE01, srvcTeamscaleCd=SRTE01, srvcLangCd=SRLA16, srvcDatabaseCd=SRDB16, srvcCludCd=SRCL14, srvcEtc=b, ..), 
		 	osClVO=OsClVO(srvcNo=null, ..), 
		 	osKeywordVO=OsKeywordVO(kwrdNo=null, outordNo=null, kwrdNm=a))
		 */
		/*
		 [2.자기소개서]->OUTSOU, OS_CL 이 두 개의 테이블에 insert
		 OutsouVO(outordNo=null, outordLclsf=OULC02, outordMlsfc=OULC02-001, outordTtl=1, ...,
		  	osDevalVO=OsDevalVO(srvcNo=null, outordNo=null, srvcLevelCd=null, srvcTeamscaleCd=null, srvcLangCd=null, srvcDatabaseCd=null, srvcCludCd=null, srvcEtc=, srvcJobpd=null, srvcUpdtnmtm=null, srvcFileprovdyn=null, srvcSklladit=null), 
		  	osClVO=OsClVO(srvcNo=null, outordNo=null, srvcFld=SRFL02, srvcKnd=SRKN03, srvcArctype=SRAR02), 
		  	osKeywordVO=OsKeywordVO(kwrdNo=null, outordNo=null, kwrdNm=))
		 */
		//대분류 를 구별하기 위해 불러옴
		String outordLclsf = outsouVO.getOutordLclsf();
		
		int result = 0;
		
		if(outordLclsf.equals("OULC01")) {//1.IT프로그래밍->mapper호출을 3회
			// 1. Outsou 테이블에 먼저 insert
			result += this.outsouMapper.insertOutsou(outsouVO);
			
			// 2. 외주 테이블에 자동 생성된 outordNo를 OutsouVO에 세팅
			String outordNo = outsouVO.getOutordNo();
			log.info("외주 테이블 자동 생성된 outordNo -> " + outordNo);
			
			// 3. OsDevalVO의 outordNo에도 같은 값 세팅
			if (outsouVO.getOsDevalVO() != null ) {
			    outsouVO.getOsDevalVO().setOutordNo(outordNo);
			 }
			
			result += this.outsouMapper.insertOsDeval(outsouVO.getOsDevalVO());
			
			//언어, 데이터베이스, 클라우드 저장 
			String srvcNo = outsouVO.getOsDevalVO().getSrvcNo();
	        log.info("서비스 테이블 자동 생성된 srvcNo -> " + srvcNo);

			//OsDevalVODP 저장된  외주 번호를 불러오기 
	        String devOutordNo = outsouVO.getOsDevalVO().getOutordNo();
	        
	        //각  항목의의 리스트를 불러오기 
	        
	        //개발 언어 처리 
	        List<OsdeLangVO> osdeLangVOList= outsouVO.getOsDevalVO().getOsdeLangVOList();
	        if(osdeLangVOList != null && !osdeLangVOList.isEmpty()) {
	        	for(OsdeLangVO osdeLangVO :  osdeLangVOList) {
	        		osdeLangVO.setOutordNo(devOutordNo);
	        		osdeLangVO.setSrvcNo(srvcNo);
	        		result += this.outsouMapper.insertOsdeLang(osdeLangVO);
	        		log.info("osdeLangVO -> " + osdeLangVO);
	        	}
	        }
	        
	        //데이터 베이스 처리 
	        List<OsdeDatabaseVO> osdeDatabaseVOList = outsouVO.getOsDevalVO().getOsdeDatabaseVOList();
	        if(osdeDatabaseVOList != null && !osdeDatabaseVOList.isEmpty() ) {
	        	for(OsdeDatabaseVO osdeDatabaseVO : osdeDatabaseVOList) {
	        		osdeDatabaseVO.setOutordNo(devOutordNo);
	        		osdeDatabaseVO.setSrvcNo(srvcNo);
	        		result += this.outsouMapper.insertOsdeDatabase(osdeDatabaseVO);
	        		log.info("osdeDatabaseVO -> " + osdeDatabaseVO);
	        	}
	        }
	        
	        //클라우드 처리 
	        List<OsdeCludVO> OsdeCludVOList = outsouVO.getOsDevalVO().getOsdeCludVOList();
	        if(OsdeCludVOList != null && !OsdeCludVOList.isEmpty() ) {
	        	for(OsdeCludVO osdeCludVO : OsdeCludVOList) {
	        		osdeCludVO.setOutordNo(devOutordNo);
	        		osdeCludVO.setSrvcNo(srvcNo);
	        		result += this.outsouMapper.insertOsdeClud(osdeCludVO);
	        		log.info("osdeCludVO -> " + osdeCludVO);
	        	}
	        }
	        
	        //키워드명 처리
	        List<OsKeywordVO> osKeywordVOList = outsouVO.getOsKeywordVOList();
	        if(osKeywordVOList != null && !osKeywordVOList.isEmpty() ) {
	        	for(OsKeywordVO osKeywordVO : osKeywordVOList) {
	        		osKeywordVO.setOutordNo(outordNo);
	        		result += this.outsouMapper.insertOsKeywoed(osKeywordVO);
	        		log.info("osKeywordVO -> " + osKeywordVO);
	        	}
	        }
			
		}else {//2.자기소개서->mapper호출을 2회
			result += this.outsouMapper.insertOutsou(outsouVO);
			
			// 2. 자동 생성된 outordNo를 OutsouVO에 세팅
			String outordNo = outsouVO.getOutordNo();
			log.info("자동 생성된 outordNo -> " + outordNo);
			
			// 3. OsDevalVO의 outordNo에도 같은 값 세팅
		    if (outsouVO.getOsClVO() != null ) {
		        outsouVO.getOsClVO().setOutordNo(outordNo);
		    }
			result += this.outsouMapper.insertOsCl(outsouVO.getOsClVO());
		}
		
		return result;
	}
	
	//외주 상세 
	@Override
	public OutsouVO detail(String outordNo) {


	    // 쿼리 결과로 OutsouVO를 가져옴 (DB 호출)
	    long dbStartTime = System.currentTimeMillis(); //db를  시작 
	    OutsouVO outsouVO = this.outsouMapper.detail(outordNo);
	    long dbEndTime = System.currentTimeMillis(); //db 끝
	    log.info("DB 호출 시간: " + (dbEndTime - dbStartTime) + "ms");
	    
	    // 메인 이미지, 상세 이미지 처리

	    // 콤마로 묶인 DETAIL_FILE_PATHS를 배열로 변환
	    if (outsouVO.getOutordDetailFile() != null) {
	        String detailFilePaths = outsouVO.getOutordDetailFile();
	        
	        // 콤마로 분리하여 경로 문자열을 리스트로 변환
	        List<String> detailFileList = Arrays.asList(detailFilePaths.split(","));
	        
	        // FileDetailVO 객체 리스트 생성
	        List<FileDetailVO> fileDetailVOList = new ArrayList<>();
	        
	        // 각 경로에 대해 FileDetailVO 객체 생성 후 리스트에 추가
	        for (String outordDetailFile : detailFileList) {
	            FileDetailVO fileDetailVO = new FileDetailVO();
	            fileDetailVO.setFilePathNm(outordDetailFile);  // 파일 경로 설정
	            fileDetailVOList.add(fileDetailVO);    // 리스트에 추가
	        }
	        
	        outsouVO.setFileDetailVOList(fileDetailVOList);
	    }

	    // 추가 로깅 (개발언어, 데이터베이스 등)
	    log.info("개발언어 List: " + outsouVO.getOsDevalVO().getOsdeLangVOList());
	    log.info("데이터 베이스 List: " + outsouVO.getOsDevalVO().getOsdeDatabaseVOList());
	    log.info("클라우드 List: " + outsouVO.getOsDevalVO().getOsdeCludVOList());
	    log.info("키워드 List: " + outsouVO.getOsKeywordVOList());


	    return outsouVO;
	}

	//외주 구매페이지 
	@Override
	public OutsouVO paydetail(String outordNo) {
		return this.outsouMapper.paydetail(outordNo);
	}
	
	//외주 삭제 
	@Override
	public int deletePost(String outordNo) {
		return this.outsouMapper.deletePost(outordNo);
	}
	
	

}
