<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.mapper.EnterMapper">
   
   <sql id="where"> <!-- 스카우트 제안 -->
      <if test="gubun!=null and gubun!=''">
         AND (SELECT DECODE(MAX(PC.CAREER_NO), NULL, '신입', '경력') 
               FROM PRF_CAREER PC 
               WHERE M.MBR_ID = PC.MBR_ID) = #{gubun}
      </if>
      <if test="keyword!=null and keyword!=''">
         AND M.MBR_NM LIKE '%' || #{keyword} || '%'
      </if>
      <if test="date!=null and date!=''">
          AND TRUNC(P.PROPSE_DATE) = TO_DATE(#{date}, 'YYYY/MM/DD')
      </if>
   </sql>

   <sql id="aplct"> <!-- 지원자관리 -->
      <if test="keyword!=null and keyword!=''">
         AND B.MBR_NM LIKE '%' || #{keyword} || '%'
      </if>
      <if test="date!=null and date!=''">
         <choose>
            <when test="gubun1=='aplctAppymds'">
               AND A.APLCT_APPYMD = TO_DATE(#{date})
            </when>
            <when test="gubun1=='intrvwYmd'">
               AND C.INTRVW_YMD = TO_DATE(#{date})
            </when>
         </choose>
      </if>
      <if test="gubun!=null and gubun!=''">
         AND R.RSM_CAREER_CD = #{gubun}
      </if>
      <if test="gubunSt!=null and gubunSt!=''">
         AND A.APLCT_PRCS_STAT_CD = #{gubunSt}
      </if>
      <if test="gubunPbanc!=null and gubunPbanc!=''">
         AND P.PBANC_TTL LIKE #{gubunPbanc} || '%'
      </if>
   </sql>
   
   <sql id="pbanc"> <!-- 공고관리 -->
      <if test="keyword!=null and keyword!=''">
         AND A.PBANC_TTL LIKE '%' || #{keyword} || '%'
      </if>
      <if test="date!=null and date!=''">
         <choose>
            <when test="gubun=='wrt'">
               AND TRUNC(A.PBANC_WRT_DT) = TO_DATE(#{date})
            </when>
            <when test="gubun=='bgng'">
               AND TRUNC(A.PBANC_BGNG_DT) = TO_DATE(#{date})
            </when>
            <when test="gubun=='ddln'">
               AND TRUNC(A.PBANC_DDLN_DT) = TO_DATE(#{date})
            </when>
         </choose>
      </if>
   </sql>
   <sql id="pbancOrderby">
      <if test="gubunDate==null or gubunDate==''">
         A.PBANC_WRT_DT DESC
      </if>
      <if test="gubunDate!=null and gubunDate!=''">
         <choose>
            <when test="gubunDate=='insert'">
               A.PBANC_WRT_DT DESC
            </when>
            <when test="gubunDate=='start'">
               A.PBANC_BGNG_DT DESC
            </when> 
            <when test="gubunDate=='last'">
               A.PBANC_DDLN_DT DESC
            </when>
         </choose>      
      </if>
   </sql>

   <resultMap type="PbancVO" id="pbancMap"> <!-- 공고 -->
      <result property="pbancSttus" column="PBANC_STTUS"/>
      <result property="pbancCareerCd" column="PBANC_CAREER_CD"/>
      <result property="pbancCareerCdNm" column="PBANC_CAREER_CD_NM"/>
      <result property="pbancCn" column="PBANC_CN"/>
      <result property="pbancGenCd" column="PBANC_GEN_CD"/>
      <result property="pbancGenCdNm" column="PBANC_GEN_CD_NM"/>
      <result property="pbancAppofeFormCd" column="PBANC_APPOFE_FORM_CD"/>
      <result property="pbancAppofeFormCdNm" column="PBANC_APPOFE_FORM_CD_NM"/>
      <result property="pbancImgFile" column="PBANC_IMG_FILE"/>
      <result property="pbancImgFilePath" column="PBANC_IMG_FILE_PATH"/>
      <result property="pbancAgeCd" column="PBANC_AGE_CD"/>
      <result property="pbancAgeCdNm" column="PBANC_AGE_CD_NM"/>
      <result property="pbancNo" column="PBANC_NO"/>
      <result property="entId" column="ENT_ID"/>
      <result property="pbancPicNm" column="PBANC_PIC_NM"/>
      <result property="pbancPicTelno" column="PBANC_PIC_TELNO"/>
      <result property="pbancPicEml" column="PBANC_PIC_EML"/>
      <result property="pbancAplctEduCd" column="PBANC_APLCT_EDU_CD"/>
      <result property="pbancAplctEduCdNm" column="PBANC_APLCT_EDU_CD_NM"/>
      <result property="pbancAplctEdu" column="PBANC_APLCT_EDU"/>
      <result property="pbancRprsrgn" column="PBANC_RPRSRGN"/>
      <result property="pbancRprsrgnNm" column="PBANC_RPRSRGN_NM"/>
      <result property="pbancCityNm" column="PBANC_CITY_NM"/>
      <result property="pbancTtl" column="PBANC_TTL"/>
      <result property="pbancWorkstleCd" column="PBANC_WORKSTLE_CD"/>
      <result property="pbancWorkstleCdNm" column="PBANC_WORKSTLE_CD_NM"/>
      <result property="pbancApntcpd" column="PBANC_APNTCPD"/>
      <result property="pbancSalary" column="PBANC_SALARY"/>
      <result property="pbancSalaryNm" column="PBANC_SALARY_NM"/>
      <result property="pbancWorkHrCd" column="PBANC_WORK_HR_CD"/>
      <result property="pbancWorkHrCdNm" column="PBANC_WORK_HR_CD_NM"/>
      <result property="pbancWorkDayCd" column="PBANC_WORK_DAY_CD"/>
      <result property="pbancWorkDayCdNm" column="PBANC_WORK_DAY_CD_NM"/>
      <result property="pbancRcptMthdCd" column="PBANC_RCPT_MTHD_CD"/>
      <result property="pbancRcptMthdCdNm" column="PBANC_RCPT_MTHD_CD_NM"/>
      <result property="pbancRprsDty" column="PBANC_RPRS_DTY"/>
      <result property="pbancRprsDtyNm" column="PBANC_RPRS_DTY_NM"/>
      <result property="pbancRprsDtyCdNm" column="PBANC_RPRS_DTY_CD_NM"/>
      <result property="pbancRcptPd" column="PBANC_RCPT_PD"/>
      <result property="pbancBgngDt" column="PBANC_BGNG_DT"/>
      <result property="pbancBgngDts" column="PBANC_BGNG_DTS"/>
      <result property="pbancDdlnDt" column="PBANC_DDLN_DT"/>
      <result property="pbancDdlnDts" column="PBANC_DDLN_DTS"/>
      <result property="pbancWrtDt" column="PBANC_WRT_DT"/>
      <result property="pbancMdfcnDt" column="PBANC_MDFCN_DT"/>
      <result property="pbancDelDt" column="PBANC_DEL_DT"/>
      <result property="pbancScrapCo" column="PBANC_SCRAP_CO"/>
      <result property="pbancDelYn" column="PBANC_DEL_YN"/>
      <result property="pbancRdcnt" column="PBANC_RDCNT"/>
         
      <result property="pbancBeforeWrt" column="PBANC_BEFORE_WRT"/>
      <result property="rcritCareerNm" column="RCRIT_CAREER_NM"/>
      <result property="pbancTpbizNm" column="PBANC_TPBIZ_NM"/>
      <result property="pbancWorkstleNm" column="PBANC_WORKSTLE_NM"/>
      <result property="memNm" column="MEM_NM"/>
      <result property="memBrdt" column="MEM_BRDT"/>
      <result property="memId" column="MEM_ID"/>
      
      <result property="entNm" column="ENT_NM"/>
      <result property="entStleNm" column="ENT_STLE_NM"/>
      <result property="tpbizSeCd" column="TPBIZ_SE_CD"/>
      <result property="tpbizSeCdNm" column="TPBIZ_SE_CD_NM"/>
      <result property="entEmpCnt" column="ENT_EMP_CNT"/>
      <result property="entStleCd" column="ENT_STLE_CD"/>
      <result property="entStleCdNm" column="ENT_STLE_CD_NM"/>
      <result property="entFndnYmd" column="ENT_FNDN_YMD"/>
      <result property="entLogo" column="ENT_LOGO"/>
      <result property="entHmpgUrl" column="ENT_HMPG_URL"/>
      <result property="entRprsntvNm" column="ENT_RPRSNTV_NM"/>
      <result property="entFxnum" column="ENT_FXNUM"/>
      <result property="entAddr" column="ENT_ADDR"/>

      <result property="favorCn" column="FAVOR_CN"/>
      <result property="procssCd" column="PROCSS_CD"/>
      <result property="procssCdNm" column="PROCSS_CD_NM"/>
      <result property="requiredCn" column="REQUIRED_CN"/>
      <result property="preferCn" column="PREFER_CN"/>
      <result property="rcritNm" column="RCRIT_NM"/>
      <result property="rcritCnt" column="RCRIT_CNT"/>
      <result property="rcritJbttlCd" column="RCRIT_JBTTL_CD"/>
      <result property="rcritJbttlCdNm" column="RCRIT_JBTTL_CD_NM"/>
      <result property="rcritTask" column="RCRIT_TASK"/>
      <result property="rcritDept" column="RCRIT_DEPT"/>
      <result property="powkCd" column="POWK_CD"/>
      <result property="powkNm" column="POWK_NM"/>
      <result property="rnum" column="RNUM"/>
      <result property="tpbizCd" column="TPBIZ_CD"/>
      <collection property="fileDetailVOList" resultMap="fileDetailMap"></collection>
   </resultMap>
   
   <resultMap type="tbcIndutyVO" id="tbcIndutyMap"> <!-- 업종 -->
      <result property="tpbizCd" column="TPBIZ_CD"/>
      <result property="pbancNo" column="PBANC_NO"/>
   </resultMap>
   
   <resultMap type="tbcRecruitmentVO" id="tbcRecruitmentMap"> <!-- 모집분야 -->
      <result property="rcritNo" column="RCRIT_NO"/>
      <result property="pbancNo" column="PBANC_NO"/>
      <result property="rcritNm" column="RCRIT_NM"/>
      <result property="rcritCareerCd" column="RCRIT_CAREER_CD"/>
      <result property="rcritTask" column="RCRIT_TASK"/>
      <result property="rcritDept" column="RCRIT_DEPT"/>
      <result property="rcritJbttlCd" column="RCRIT_JBTTL_CD"/>
   </resultMap>
   
   <resultMap type="enterVO" id="enterMap"> <!-- 기업 -->
      <result property="userType" column="USER_TYPE"/>
      <result property="entMail" column="ENT_MAIL"/>
      <result property="entId" column="ENT_ID"/>
      <result property="entPswd" column="ENT_PSWD"/>
      <result property="entNm" column="ENT_NM"/>
      <result property="entManagerTelno" column="ENT_MANAGER_TELNO"/>
      <result property="entFxnum" column="ENT_FXNUM"/>
      <result property="entAddr" column="ENT_ADDR"/>
      <result property="entAddrDetail" column="ENT_ADDR_DETAIL"/>
      <result property="entZip" column="ENT_ZIP"/>
      <result property="entLogo" column="ENT_LOGO"/>
      <result property="entLogos" column="ENT_LOGOS"/>
      <result property="entRprsntvNm" column="ENT_RPRSNTV_NM"/>
      <result property="entIntrcnsntnc" column="ENT_INTRCNSNTNC"/>
      <result property="entStleCd" column="ENT_STLE_CD"/>
      <result property="entEmpCnt" column="ENT_EMP_CNT"/>
      <result property="entFndnYmd" column="ENT_FNDN_YMD"/>
      <result property="entHmpgUrl" column="ENT_HMPG_URL"/>
      <result property="entBrno" column="ENT_BRNO"/>
      <result property="entBrFile" column="ENT_BR_FILE"/>
      <result property="enabled" column="ENABLED"/>
      <result property="tpbizSeCd" column="TPBIZ_SE_CD"/>
      <collection property="userAuthVOList" resultMap="enterAuthMap"></collection>
      <collection property="codeVOList" resultMap="codeMap"></collection>
      <collection property="pbancVOList" resultMap="pbancMap"></collection>
      <collection property="fileDetailVOList" resultMap="fileDetailMap"></collection>
   </resultMap>
   
   <resultMap type="fileDetailVO" id="fileDetailMap"> <!-- 파일 -->
      <result property="fileGroupSn" column="FILE_GROUP_SN"/>
      <result property="fileSn" column="FILE_SN"/>
      <result property="orgnlFileNm" column="ORGNL_FILE_NM"/>
      <result property="strgFileNm" column="STRG_FILE_NM"/>
      <result property="filePathNm" column="FILE_PATH_NM"/>
      <result property="fileSz" column="FILE_SZ"/>
      <result property="fileExtnNm" column="FILE_EXTN_NM"/>
      <result property="fileMime" column="FILE_MIME"/>
      <result property="fileFancysize" column="FILE_FANCYSIZE"/>
      <result property="fileStrgYmd" column="FILE_STRG_YMD"/>
      <result property="fileDwnldCnt" column="FILE_DWNLD_CNT"/>
   </resultMap>
   
   
   <resultMap type="userAuthVO" id="enterAuthMap"> <!-- 권한 -->
      <result property="entId" column="ENT_ID"/>
      <result property="auth" column="AUTH"/>
   </resultMap>
   
   <resultMap type="codeVO" id="codeMap"> <!-- 공통코드 -->
   <result property="comCode" column="COM_CODE"/>
   <result property="comCodeGrp" column="COM_CODE_GRP"/>
   <result property="comCodeNm" column="COM_CODE_NM"/>
   <result property="comCodeDesc" column="COM_CODE_DESC"/>
   <result property="useYn" column="USE_YN"/>
   <result property="upperComCode" column="UPPER_COM_CODE"/>
   <result property="upperComCodeGrp" column="UPPER_COM_CODE_GRP"/>
   </resultMap>
   
    <resultMap type="memberVO" id="memberMap"> <!-- 회원 -->
      <result property="mbrId" column="MBR_ID"/>
      <result property="mbrPswd" column="MBR_PSWD"/>
      <result property="mbrNm" column="MBR_NM"/>
      <result property="mbrBrdt" column="MBR_BRDT"/>
      <result property="mbrSexdstnCd" column="MBR_SEXDSTN_CD"/>
      <result property="mbrEml" column="MBR_EML"/>
      <result property="mbrTelno" column="MBR_TELNO"/>
      <result property="mbrZip" column="MBR_ZIP"/>
      <result property="mbrAddr" column="MBR_ADDR"/>
      <result property="mbrAddrDtl" column="MBR_ADDR_DTL"/>
      <result property="mbrJoinYmd" column="MBR_JOIN_YMD"/>
      <result property="mbrWhdwlYmd" column="MBR_WHDWL_YMD"/>
      <result property="enabled" column="ENABLED"/>
      <result property="mbrWarnCo" column="MBR_WARN_CO"/>
      <result property="mbrAcnutno" column="MBR_ACNUTNO"/>
      <result property="entId" column="ENT_ID"/>
      <result property="userType" column="USER_TYPE"/>
      <result property="fileGroupSn" column="FILE_GROUP_SN"/>  
      
      <result property="rsmCareerCd" column="RSM_CAREER_CD"/>    
      <result property="skCd" column="SK_CD"/>    
      <result property="tpbizSeCd" column="TPBIZ_SE_CD"/>    
      <result property="tpbizSeNm" column="TPBIZ_SE_NM"/>
      <result property="fileNm" column="FILE_NM"/>    
   </resultMap>
   
   <resultMap type="applicantVO" id="applicantMap"> <!-- 지원자 -->
      <result property="mbrId" column="MBR_ID"/>
      <result property="pbancNo" column="PBANC_NO"/>
      <result property="rsmTtl" column="RSM_TTL"/>
      <result property="rsmNo" column="RSM_NO"/>
      <result property="aplctAppymd" column="APLCT_APPYMD"/>
      <result property="aplctAppymds" column="APLCT_APPYMDS"/>
      <result property="aplctPrcsStatCd" column="APLCT_PRCS_STAT_CD"/>
      <result property="aplctPrcsStatCdNm" column="APLCT_PRCS_STAT_CD_NM"/>
      <result property="aplctFile" column="APLCT_FILE"/>
      <result property="aplctFileNm" column="APLCT_FILE_NM"/>
<!--       <result property="aplctPrvcagreYmd" column="APLCT_PRVCAGRE_YMD"/> -->
      <result property="aplctCancelCd" column="APLCT_CANCEL_CD"/>
      
      <result property="entNm" column="ENT_NM"/> 
      <result property="pbancTtl" column="PBANC_TTL"/>
      <result property="pbancDdlnDt" column="PBANC_DDLN_DT"/>
      <result property="rsmCareerCd" column="RSM_CAREER_CD"/>
      <result property="mbrNm" column="MBR_NM"/>
      <result property="intrvwYmd" column="INTRVW_YMD"/>
      <result property="fileGroupSn" column="FILE_GROUP_SN"/>
      <result property="fileNm" column="FILE_NM"/>
      <result property="procssCd" column="PROCSS_CD"/>
      
   </resultMap>
   
   <resultMap type="proposalVO" id="proposalMap"> <!-- 제안 -->
      <result property="propseNo" column="PROPSE_NO"/>
      <result property="entId" column="ENT_ID"/>
      <result property="mbrId" column="MBR_ID"/>
      <result property="propsePbancTtl" column="PROPSE_PBANC_TTL"/>
      <result property="propseTtl" column="PROPSE_TTL"/>
      <result property="propseCn" column="PROPSE_CN"/>
      <result property="propseDate" column="PROPSE_DATE"/>
      <result property="propseFile" column="PROPSE_FILE"/>
      <result property="propseSttus" column="PROPSE_STTUS"/>
      
      <result property="mbrNm" column="MBR_NM"/>   
      <result property="mbrBrdt" column="MBR_BRDT"/>
      <result property="rsmCareerCd" column="RSM_CAREER_CD"/>
      <result property="entNm" column="ENT_NM"/>
      <result property="fileGroupSn" column="FILE_GROUP_SN"/>
      <result property="fileNm" column="FILE_NM"/>
   </resultMap>
   
   <!-- ***** 쿼리 시작 ***** -->   
   
   <select id="selectOne" parameterType="String" resultMap="enterMap">
      SELECT A.ENT_ID, A.ENT_PSWD, A.ENT_NM, A.ENT_MANAGER_TELNO, 
             A.ENT_FXNUM, A.ENT_ADDR, A.ENT_ADDR_DETAIL, A.ENT_ZIP
             , (SELECT F.FILE_PATH_NM FROM FILE_DT F WHERE F.FILE_GROUP_SN = A.ENT_LOGO) AS ENT_LOGOS
             , ENT_LOGO
             , A.ENT_RPRSNTV_NM, 
             A.ENT_STLE_CD, A.ENT_EMP_CNT, A.ENT_FNDN_YMD, A.ENT_HMPG_URL, 
             A.ENT_BRNO, A.ENT_BR_FILE, A.ENABLED, A.USER_TYPE,
             B.AUTH
            FROM ENTER A LEFT OUTER JOIN AUTH_ENT B ON(A.ENT_ID = B.ENT_ID)
            WHERE  A.ENT_ID = #{username}
   </select>

   <!-- 기업프로필 -->
   <select id="profile" parameterType="String" resultMap="enterMap">
      SELECT A.ENT_NM
             , (SUBSTR(REPLACE(A.ENT_FNDN_YMD, '.', ''), 0, 4) || '.' ||
                SUBSTR(REPLACE(A.ENT_FNDN_YMD, '.', ''), 5, 2) || '.' ||
                SUBSTR(REPLACE(A.ENT_FNDN_YMD, '.', ''), 7, 3)) AS ENT_FNDN_YMD    
          , A.ENT_ID
          , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.ENT_STLE_CD) ENT_STLE_CD
          , A.ENT_EMP_CNT
             , (SELECT F.FILE_PATH_NM FROM FILE_DT F WHERE F.FILE_GROUP_SN = A.ENT_LOGO) AS ENT_LOGO
             , A.ENT_HMPG_URL
          , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.TPBIZ_SE_CD) TPBIZ_SE_CD
             , A.ENT_RPRSNTV_NM
             , (SUBSTR(REPLACE(A.ENT_FXNUM, '-', ''), 0, 3) || '-' ||
                SUBSTR(REPLACE(A.ENT_FXNUM, '-', ''), 3, 3) || '-' ||
                SUBSTR(REPLACE(A.ENT_FXNUM, '-', ''), 6, 4)) AS ENT_FXNUM
          , A.ENT_ADDR
        FROM ENTER A
       WHERE A.ENT_ID = #{entId}
   </select>

   <!-- 기업 프로필 연도별  입사자수  -->
   <select id="empYcnt" parameterType="String" resultType="enterEmpYcntVO">
      WITH GENERATED_DATES AS (
          SELECT TO_CHAR(ADD_MONTHS(SYSDATE, -LEVEL), 'YYYY.MM') AS ENT_YM
            FROM DUAL
          CONNECT BY LEVEL <![CDATA[<=]]> 12
      )
      SELECT E.ENT_EMP_YCNT_NO, E.ENT_ID, G.ENT_YM, E.ENT_EMP_YCNT, E.ENT_NEWEMP, E.ENT_OUTEMP
        FROM ENT_EMP_YCNT E
        JOIN GENERATED_DATES G
          ON E.ENT_YM = G.ENT_YM
       WHERE E.ENT_ID = #{entId}
       ORDER BY ENT_YM
   </select>
   
   <!-- 기업정보수정 폼 -->
   <select id="edit" parameterType="String" resultMap="enterMap">
      SELECT A.ENT_NM, A.ENT_ID
             , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.TPBIZ_SE_CD) TPBIZ_SE_CD
             , (SELECT F.FILE_PATH_NM FROM FILE_DT F WHERE F.FILE_GROUP_SN = A.ENT_LOGO) AS ENT_LOGO
           , A.ENT_EMP_CNT
           , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.ENT_STLE_CD) ENT_STLE_CD
           , A.ENT_RPRSNTV_NM
           , A.ENT_HMPG_URL
             , (SUBSTR(REPLACE(A.ENT_FNDN_YMD, '-', ''), 0, 4) || '-' ||
                SUBSTR(REPLACE(A.ENT_FNDN_YMD, '-', ''), 5, 2) || '-' ||
                SUBSTR(REPLACE(A.ENT_FNDN_YMD, '-', ''), 7, 3)) AS ENT_FNDN_YMD        
             , (SUBSTR(REPLACE(A.ENT_MANAGER_TELNO, '-', ''), 0, 3) || '-' ||
                SUBSTR(REPLACE(A.ENT_MANAGER_TELNO, '-', ''), 4, 4) || '-' ||
                SUBSTR(REPLACE(A.ENT_MANAGER_TELNO, '-', ''), 8, 5)) AS ENT_MANAGER_TELNO        
             , (SUBSTR(REPLACE(A.ENT_FXNUM, '-', ''), 0, 3) || '-' ||
                SUBSTR(REPLACE(A.ENT_FXNUM, '-', ''), 4, 3) || '-' ||
                SUBSTR(REPLACE(A.ENT_FXNUM, '-', ''), 7, 5)) AS ENT_FXNUM        
           , A.ENT_MAIL
             , A.ENT_ZIP
             , A.ENT_ADDR
             , A.ENT_ADDR_DETAIL
             , (SUBSTR(REPLACE(A.ENT_BRNO, '-', ''), 0, 3) || '-' ||
                SUBSTR(REPLACE(A.ENT_BRNO, '-', ''), 4, 2) || '-' ||
                SUBSTR(REPLACE(A.ENT_BRNO, '-', ''), 6, 6)) AS ENT_BRNO
             , (SELECT F.FILE_PATH_NM FROM FILE_DT F WHERE F.FILE_GROUP_SN = A.ENT_BR_FILE) AS ENT_BR_FILE
      FROM ENTER A 
      WHERE A.ENT_ID = #{entId}
   </select>

   <!-- 기업정보수정에서 업종 출력 -->
   <select id="getIndutyList" parameterType="String" resultMap="codeMap">
       SELECT COM_CODE, COM_CODE_NM 
         FROM CODE
        WHERE COM_CODE_GRP = 'CRDT'
        ORDER BY COM_CODE
   </select>
   
   <!-- 기업정보수정에서 기업형태 출력 -->
   <select id="getEntStleCdList" parameterType="String" resultMap="codeMap">
      SELECT COM_CODE, COM_CODE_NM 
         FROM CODE
        WHERE COM_CODE_GRP = 'ENST'
        ORDER BY COM_CODE      
   </select>
   
   <!-- 기업정보수정 실행 -->
   <update id="editPost1" parameterType="enterVO">
      UPDATE ENTER
         SET ENT_NM = #{entNm}
           , ENT_FNDN_YMD = #{entFndnYmd}
           , ENT_EMP_CNT = #{entEmpCnt}
           , ENT_STLE_CD = #{entStleCd}
           , ENT_RPRSNTV_NM = #{entRprsntvNm}
           , ENT_HMPG_URL = #{entHmpgUrl}
           , ENT_MANAGER_TELNO = #{entManagerTelno}
           , ENT_FXNUM = #{entFxnum}
           , ENT_MAIL = #{entMail}
           , ENT_ZIP = #{entZip}
           , ENT_LOGO = #{entLogo}
           , ENT_ADDR = #{entAddr}
           , ENT_ADDR_DETAIL = #{entAddrDetail}
           , ENT_BRNO = #{entBrno}
           , ENT_BR_FILE = #{entBrFile}
           , TPBIZ_SE_CD = #{tpbizSeCd}
      WHERE  ENT_ID = #{entId}   
   </update>

   <!-- 비밀번호수정 -->
   <select id="passEdit" parameterType="String" resultType="enterVO">
      SELECT ENT_ID, ENT_PSWD
        FROM ENTER
       WHERE ENT_ID = #{entId} 
   </select>

   <!-- 비밀번호수정실행 -->
   <update id="passEditPost" parameterType="enterVO">
      UPDATE ENTER
         SET ENT_PSWD = #{entPswd}      
      WHERE  ENT_ID = #{entId}      
   </update>

   <!-- 기업탈퇴 -->
   <update id="deleteAjax" parameterType="String">
      UPDATE ENTER
         SET ENABLED = '2'     
       WHERE ENT_ID = #{entId}
   </update>
   
   <!-- 인재리스트 -->
   <select id="getInjaeList" parameterType="map" resultMap="memberMap">
      WITH T AS (
         SELECT ROW_NUMBER() OVER (
                        ORDER BY 
                            CASE 
                                WHEN Z.TPBIZ_SE_CDS LIKE '%' || Z.E_TPBIZ_SE_CD || '%' THEN 1
                                ELSE 2 
                            END, 
                            Z.MBR_NM ASC) AS RNUM,
                  Z.*
          FROM (
              SELECT DISTINCT 
                  M.MBR_ID,
                  M.MBR_NM,
                  CASE 
                      WHEN M.MBR_BRDT IS NOT NULL THEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(M.MBR_BRDT, 'YYYYMMDD')) / 12) 
                      ELSE NULL 
                  END AS MBR_BRDT,
                  (SELECT DECODE(MAX(PC.CAREER_NO), NULL, '신입', '경력') 
                      FROM PRF_CAREER PC 
                      WHERE M.MBR_ID = PC.MBR_ID) AS CAREER, 
                  NVL(
                      (SELECT LISTAGG(C.COM_CODE_NM, ', ') WITHIN GROUP (ORDER BY C.COM_CODE)
                          FROM PRF_BUSINESS B 
                          JOIN CODE C ON C.COM_CODE = B.TPBIZ_SE_CD
                          WHERE M.MBR_ID = B.MBR_ID), 
                      '업종 분야 없음') AS TPBIZ_SE_CD,
                  (SELECT LISTAGG(B.TPBIZ_SE_CD,',')WITHIN GROUP(ORDER BY B.TPBIZ_SE_CD)FROM PRF_BUSINESS B
                     WHERE M.MBR_ID = B.MBR_ID) AS TPBIZ_SE_CDS, 
                  (SELECT FILE_PATH_NM FROM FILE_DT F WHERE FILE_GROUP_SN = M.FILE_GROUP_SN) AS   FILE_GROUP_SN,
                    (SELECT ORGNL_FILE_NM FROM FILE_DT F WHERE FILE_GROUP_SN = M.FILE_GROUP_SN) AS   FILE_NM, 
                  M.MBR_EML,
                  E.ENT_ID,
                  E.TPBIZ_SE_CD AS E_TPBIZ_SE_CD,
                  NVL(
                     (SELECT LISTAGG(D.COM_CODE_NM, ', ') WITHIN GROUP (ORDER BY D.COM_CODE)
                      FROM PRF_SKILL S
                      JOIN CODE D ON D.COM_CODE = S.SK_CD
                      WHERE S.MBR_ID = M.MBR_ID),
                      'Skill None') AS SK_CD
              FROM MEMBER M
              LEFT JOIN ENTER E ON E.ENT_ID = #{entId} 
              LEFT JOIN PRF_BUSINESS B ON M.MBR_ID = B.MBR_ID
              LEFT JOIN PRF_CAREER C ON M.MBR_ID = C.MBR_ID
              
                <if test="keyword!=null and keyword!=''">
                WHERE EXISTS (
                SELECT MBR_ID FROM PRF_SKILL S WHERE 
                M.MBR_ID = S.MBR_ID
                AND S.SK_CD IN (
                      SELECT C.COM_CODE 
                      FROM CODE C 
                      WHERE  1 = 1
                        <if test="keyword != null">
                        AND C.COM_CODE_GRP = 'SK'
                       AND C.COM_CODE_NM IN 
                           <foreach collection="keyword" item="ITEM" open="(" close=")" separator="," index="index">
                           #{ITEM}
                           </foreach>
                        </if>   
                  )
                )              
                   </if> 
              
          ) Z
   
      )
      SELECT * 
      FROM T
      WHERE T.RNUM BETWEEN (#{currentPage} - 1) * 5 + 1 AND #{currentPage} * 5
   </select>
   <!-- 회원 인재리스트 -->
   <select id="getInjaeList2" parameterType="map" resultMap="memberMap">
      WITH T AS (
         SELECT ROW_NUMBER() OVER (
                        ORDER BY 
                            CASE 
                                WHEN Z.TPBIZ_SE_CDS LIKE '%' || Z.E_TPBIZ_SE_CD || '%' THEN 1
                                ELSE 2 
                            END, 
                            Z.MBR_NM ASC) AS RNUM,
                  Z.*
          FROM (
              SELECT DISTINCT 
                  M.MBR_ID,
                  M.MBR_NM,
                  CASE 
                      WHEN M.MBR_BRDT IS NOT NULL THEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(M.MBR_BRDT, 'YYYYMMDD')) / 12) 
                      ELSE NULL 
                  END AS MBR_BRDT,
                  (SELECT DECODE(MAX(PC.CAREER_NO), NULL, '신입', '경력') 
                      FROM PRF_CAREER PC 
                      WHERE M.MBR_ID = PC.MBR_ID) AS CAREER, 
                  NVL(
                      (SELECT LISTAGG(C.COM_CODE_NM, ', ') WITHIN GROUP (ORDER BY C.COM_CODE)
                          FROM PRF_BUSINESS B 
                          JOIN CODE C ON C.COM_CODE = B.TPBIZ_SE_CD
                          WHERE M.MBR_ID = B.MBR_ID), 
                      '업종 분야 없음') AS TPBIZ_SE_CD,
                  (SELECT LISTAGG(B.TPBIZ_SE_CD,',')WITHIN GROUP(ORDER BY B.TPBIZ_SE_CD)FROM PRF_BUSINESS B
                     WHERE M.MBR_ID = B.MBR_ID) AS TPBIZ_SE_CDS, 
                  (SELECT FILE_PATH_NM FROM FILE_DT F WHERE FILE_GROUP_SN = M.FILE_GROUP_SN) AS   FILE_GROUP_SN,
                    (SELECT ORGNL_FILE_NM FROM FILE_DT F WHERE FILE_GROUP_SN = M.FILE_GROUP_SN) AS   FILE_NM, 
                  M.MBR_EML,
                  E.ENT_ID,
                  E.TPBIZ_SE_CD AS E_TPBIZ_SE_CD,
                  NVL(
                     (SELECT LISTAGG(D.COM_CODE_NM, ', ') WITHIN GROUP (ORDER BY D.COM_CODE)
                      FROM PRF_SKILL S
                      JOIN CODE D ON D.COM_CODE = S.SK_CD
                      WHERE S.MBR_ID = M.MBR_ID),
                      'Skill None') AS SK_CD
              FROM MEMBER M
              LEFT JOIN ENTER E ON E.ENT_ID = #{entId} 
              LEFT JOIN PRF_BUSINESS B ON M.MBR_ID = B.MBR_ID
              LEFT JOIN PRF_CAREER C ON M.MBR_ID = C.MBR_ID
              
                <if test="keyword!=null and keyword!=''">
                WHERE EXISTS (
                SELECT MBR_ID FROM PRF_SKILL S WHERE 
                M.MBR_ID = S.MBR_ID
                AND S.SK_CD IN (
                      SELECT C.COM_CODE 
                      FROM CODE C 
                      WHERE  1 = 1
                        <if test="keyword != null">
                        AND C.COM_CODE_GRP = 'SK'
                       AND C.COM_CODE_NM IN 
                           <foreach collection="keyword" item="ITEM" open="(" close=")" separator="," index="index">
                           #{ITEM}
                           </foreach>
                        </if>   
                  )
                )              
                   </if> 
              
          ) Z
      )
      SELECT * 
      FROM T
      WHERE T.RNUM BETWEEN (#{currentPage} - 1) * 8 + 1 AND #{currentPage} * 8
   </select>
   
   <!-- 인재 스킬 
   -->
   <select id="getSkillList" parameterType="String" resultMap="codeMap">
      SELECT COM_CODE, COM_CODE_NM 
       FROM CODE
       WHERE COM_CODE_GRP = 'SK'
       ORDER BY COM_CODE   
   </select>   
   
   <!-- 기업추천인재 -->
   <select id="getRecommendList" parameterType="String" resultMap="memberMap">
       SELECT *
       FROM (
         SELECT A.MBR_NM
                  , A.MBR_ID
<!--                   , (SELECT MAX(F.FILE_PATH_NM)  -->
<!--                      FROM FILE_DT F  -->
<!--                      WHERE A.FILE_GROUP_SN = F.FILE_GROUP_SN) AS FILE_GROUP_SN -->
                  , (SELECT LISTAGG(C.COM_CODE_NM, ', ') WITHIN GROUP (ORDER BY C.COM_CODE)
                     FROM PRF_BUSINESS B 
                     JOIN CODE C ON C.COM_CODE = B.TPBIZ_SE_CD
                     JOIN ENTER E ON B.TPBIZ_SE_CD = E.TPBIZ_SE_CD
                     WHERE A.MBR_ID = B.MBR_ID
                     AND E.ENT_ID = #{entId}
                     AND B.TPBIZ_SE_CD IS NOT NULL) AS TPBIZ_SE_NM
                  , SUBSTR((SELECT LISTAGG(D.COM_CODE_NM, ', ') WITHIN GROUP (ORDER BY D.COM_CODE)
                     FROM PRF_SKILL S
                     JOIN CODE D ON D.COM_CODE = S.SK_CD
                     WHERE S.MBR_ID = A.MBR_ID), 1, 12) || '..' AS SK_CD
                  , (SELECT DECODE(MAX(PC.CAREER_NO), NULL, '신입', '경력') 
                      FROM PRF_CAREER PC 
                      WHERE A.MBR_ID = PC.MBR_ID) AS CAREER,
                      (SELECT FILE_PATH_NM FROM FILE_DT F WHERE FILE_GROUP_SN = A.FILE_GROUP_SN) AS   FILE_GROUP_SN,
                    (SELECT ORGNL_FILE_NM FROM FILE_DT F WHERE FILE_GROUP_SN = A.FILE_GROUP_SN) AS   FILE_NM
             FROM MEMBER A
             JOIN PRF P ON A.MBR_ID = P.MBR_ID
             GROUP BY A.MBR_NM, A.MBR_ID, A.FILE_GROUP_SN 
<!--              HAVING (SELECT LISTAGG(C.COM_CODE_NM, ', ') WITHIN GROUP (ORDER BY C.COM_CODE) -->
<!--                      FROM PRF_BUSINESS B  -->
<!--                      JOIN CODE C ON C.COM_CODE = B.TPBIZ_SE_CD -->
<!--                      JOIN ENTER E ON B.TPBIZ_SE_CD = E.TPBIZ_SE_CD -->
<!--                      WHERE A.MBR_ID = B.MBR_ID -->
<!--                      AND E.ENT_ID = #{entId} -->
<!--                      AND B.TPBIZ_SE_CD IS NOT NULL) IS NOT NULL -->
             ORDER BY DBMS_RANDOM.VALUE
       )
       <![CDATA[
       WHERE ROWNUM <= 3  
       ]]>
   </select>

   <!-- 인재 스카우트 제안에서 공고 꺼내기 -->
   <select id="pbancList" parameterType="String" resultType="pbancVO">
      SELECT DISTINCT PBANC_TTL
      FROM PBANC
      WHERE ENT_ID = #{entId}
   </select>
   <!-- 인재 메일 전송시 기업 정보 꺼내기 -->
   <select id="getEntInfo" parameterType="hashMap" resultType="enterVO">
      SELECT * FROM ENTER WHERE ENT_ID = #{entId}
   </select>
   <!-- 인재 메일 전송시 파일 경로 가져오기 -->
   <select id="getfilePath" parameterType="hashMap" resultType="fileDetailVO">
      SELECT * FROM FILE_DT WHERE FILE_GROUP_SN = #{fileGroupNo}
   </select>
   <!-- 제안테이블 추가 -->
   <insert id="setProposal" parameterType="hashMap">
      <selectKey resultType="String" order="BEFORE" keyProperty="propseNo">
         (SELECT MAX(TO_NUMBER(PROPSE_NO))+1 FROM PROPOSAL)
      </selectKey>
      INSERT INTO PROPOSAL(PROPSE_NO, ENT_ID, MBR_ID, PROPSE_TTL, PROPSE_CN, PROPSE_DATE, PROPSE_FILE, PROPSE_PBANC_TTL) 
      VALUES(#{propseNo},#{entId},#{mbrId},#{title},#{content},SYSDATE,#{fileGroupNo,jdbcType=VARCHAR},#{jobPost,jdbcType=VARCHAR})
   </insert>
   <!-- 전체 행의 수(인재) -->
   <select id="getTotalInjae" parameterType="hashMap" resultType="int">
       SELECT COUNT(*)
      FROM (
         SELECT ROW_NUMBER() OVER (
                        ORDER BY 
                            CASE 
                                WHEN Z.TPBIZ_SE_CDS LIKE '%' || Z.E_TPBIZ_SE_CD || '%' THEN 1
                                ELSE 2 
                            END, 
                            Z.MBR_NM ASC) AS RNUM,
                  Z.*
          FROM (
              SELECT DISTINCT 
                  M.MBR_ID,
                  M.MBR_NM,
                  CASE 
                      WHEN M.MBR_BRDT IS NOT NULL THEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(M.MBR_BRDT, 'YYYYMMDD')) / 12) 
                      ELSE NULL 
                  END AS MBR_BRDT,
                  (SELECT DECODE(MAX(PC.CAREER_NO), NULL, '신입', '경력') 
                      FROM PRF_CAREER PC 
                      WHERE M.MBR_ID = PC.MBR_ID) AS CAREER, 
                  NVL(
                      (SELECT LISTAGG(C.COM_CODE_NM, ', ') WITHIN GROUP (ORDER BY C.COM_CODE)
                          FROM PRF_BUSINESS B 
                          JOIN CODE C ON C.COM_CODE = B.TPBIZ_SE_CD
                          WHERE M.MBR_ID = B.MBR_ID), 
                      '업종 분야 없음') AS TPBIZ_SE_CD,
                  (SELECT LISTAGG(B.TPBIZ_SE_CD,',')WITHIN GROUP(ORDER BY B.TPBIZ_SE_CD)FROM PRF_BUSINESS B
                     WHERE M.MBR_ID = B.MBR_ID) AS TPBIZ_SE_CDS, 
                  (SELECT FILE_PATH_NM FROM FILE_DT F WHERE FILE_GROUP_SN = M.FILE_GROUP_SN) AS   FILE_GROUP_SN,
                    (SELECT ORGNL_FILE_NM FROM FILE_DT F WHERE FILE_GROUP_SN = M.FILE_GROUP_SN) AS   FILE_NM, 
                  M.MBR_EML,
                  E.ENT_ID,
                  E.TPBIZ_SE_CD AS E_TPBIZ_SE_CD,
                  NVL(
                     (SELECT LISTAGG(D.COM_CODE_NM, ', ') WITHIN GROUP (ORDER BY D.COM_CODE)
                      FROM PRF_SKILL S
                      JOIN CODE D ON D.COM_CODE = S.SK_CD
                      WHERE S.MBR_ID = M.MBR_ID),
                      'Skill None') AS SK_CD
              FROM MEMBER M
              LEFT JOIN ENTER E ON E.ENT_ID = #{entId} 
              LEFT JOIN PRF_BUSINESS B ON M.MBR_ID = B.MBR_ID
              LEFT JOIN PRF_CAREER C ON M.MBR_ID = C.MBR_ID
              
                <if test="keyword!=null and keyword!=''">
                WHERE EXISTS (
                SELECT MBR_ID FROM PRF_SKILL S WHERE 
                M.MBR_ID = S.MBR_ID
                AND S.SK_CD IN (
                      SELECT C.COM_CODE 
                      FROM CODE C 
                      WHERE  1 = 1
                        <if test="keyword != null">
                        AND C.COM_CODE_GRP = 'SK'
                       AND C.COM_CODE_NM IN 
                           <foreach collection="keyword" item="ITEM" open="(" close=")" separator="," index="index">
                           #{ITEM}
                           </foreach>
                        </if>   
                  )
                )              
                   </if> 
              
          ) Z  
      )
   </select>  
      
   <!-- 공고관리 -->
   <select id="getPbancList" parameterType="map" resultMap="pbancMap">
      WITH T AS (
         SELECT ROW_NUMBER() OVER (ORDER BY <include refid="pbancOrderby"></include>) AS RNUM    
                  , B.ENT_NM
                  , A.PBANC_NO
                  , B.ENT_ID
               , TO_CHAR(A.PBANC_WRT_DT, 'YYYY.MM.DD') AS PBANC_WRT_DT 
                , TO_CHAR(A.PBANC_MDFCN_DT, 'YYYY.MM.DD') AS PBANC_MDFCN_DT
                , TO_CHAR(A.PBANC_DDLN_DT, 'YYYY.MM.DD') AS PBANC_DDLN_DT
                , TO_CHAR(A.PBANC_BGNG_DT, 'YYYY.MM.DD') AS PBANC_BGNG_DT
                 , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE=B.ENT_STLE_CD) AS ENT_STLE_NM
               , A.PBANC_TTL
               , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE=A.PBANC_RPRSRGN)AS PBANC_RPRSRGN_NM
               , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE=A.PBANC_APLCT_EDU_CD) AS PBANC_APLCT_EDU
               , TO_CHAR(A.PBANC_DDLN_DT,'MM.DD(DY)') AS PBANC_DLN_DT
               , TRUNC(SYSDATE-A.PBANC_WRT_DT) AS PBANC_BEFORE_WRT
               , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = D.RCRIT_CAREER_CD) AS RCRIT_CAREER_NM
               , (SELECT LISTAGG(C.COM_CODE_NM,',') WITHIN GROUP(ORDER BY C.COM_CODE) FROM CODE C WHERE C.COM_CODE IN(SELECT TPBIZ_CD FROM TBC_INDUTY I WHERE I.PBANC_NO = A.PBANC_NO)) AS PBANC_TPBIZ_NM
            FROM PBANC A, ENTER B, TBC_RECRUITMENT D
            WHERE A.ENT_ID=B.ENT_ID
            AND A.PBANC_NO = D.PBANC_NO
            AND A.ENT_ID = #{entId}
            AND A.PBANC_DDLN_DT  > SYSDATE-1
            AND A.PBANC_DEL_YN = 1
            AND A.PBANC_STTUS = 1
            <include refid="pbanc"></include>
      )
      SELECT * 
      FROM T
      WHERE T.RNUM BETWEEN (#{currentPage} - 1) * 5 + 1 AND #{currentPage} * 5
   </select>

      <!-- 전체 행의 수(공고관리) -->
      <select id="getTotalPbanc" parameterType="hashMap" resultType="int">
       SELECT COUNT(*)
         FROM PBANC A, ENTER B, TBC_RECRUITMENT D
            WHERE A.ENT_ID=B.ENT_ID
            AND A.PBANC_NO = D.PBANC_NO
            AND A.ENT_ID = #{entId}
            AND A.PBANC_DDLN_DT  > SYSDATE-1
            AND A.PBANC_DEL_YN = 1
            AND A.PBANC_STTUS = 1
         <include refid="pbanc"></include>   
      </select>  
   
   <!-- 공고 상세 페이지 -->   
   <select id="pbancDetailList" parameterType="map" resultMap="pbancMap">
      SELECT  A.PBANC_TTL
            , A.PBANC_CAREER_CD
            , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.PBANC_CAREER_CD) AS PBANC_CAREER_CD_NM
            , A.PBANC_APLCT_EDU_CD
            , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.PBANC_APLCT_EDU_CD) AS PBANC_APLCT_EDU_CD_NM
            , A.PBANC_GEN_CD
            , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.PBANC_GEN_CD) AS PBANC_GEN_CD_NM
            , A.PBANC_SALARY
            , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.PBANC_SALARY) AS PBANC_SALARY_NM
            , A.PBANC_WORKSTLE_CD
            , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.PBANC_WORKSTLE_CD) AS PBANC_WORKSTLE_CD_NM
            , A.PBANC_WORK_HR_CD
            , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.PBANC_WORK_HR_CD) AS PBANC_WORK_HR_CD_NM
            , A.PBANC_APPOFE_FORM_CD
            , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.PBANC_APPOFE_FORM_CD) AS PBANC_APPOFE_FORM_CD_NM
            , A.PBANC_RCPT_MTHD_CD
            , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.PBANC_RCPT_MTHD_CD) AS PBANC_RCPT_MTHD_CD_NM
            , A.PBANC_AGE_CD
            , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.PBANC_AGE_CD) AS PBANC_AGE_CD_NM
            , TO_CHAR(A.PBANC_DDLN_DT, 'YYYY-MM-DD') AS PBANC_DDLN_DTS
            , TO_CHAR(A.PBANC_BGNG_DT, 'YYYY-MM-DD') AS PBANC_BGNG_DTS
            , A.PBANC_SCRAP_CO
            , A.PBANC_IMG_FILE
            , (SELECT F.FILE_PATH_NM FROM FILE_DT F WHERE F.FILE_GROUP_SN = A.PBANC_IMG_FILE) AS PBANC_IMG_FILE_PATH
            , A.PBANC_CN
            , A.PBANC_NO
            , A.ENT_ID
            , A.PBANC_WORK_DAY_CD
            , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.PBANC_WORK_DAY_CD) AS PBANC_WORK_DAY_CD_NM
            , A.PBANC_RPRS_DTY
            , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.PBANC_RPRS_DTY) AS PBANC_RPRS_DTY_CD_NM
            , B.ENT_NM
            , B.ENT_ADDR
            , B.TPBIZ_SE_CD
            , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = B.TPBIZ_SE_CD) AS TPBIZ_SE_CD_NM
            , B.ENT_EMP_CNT
            , B.ENT_STLE_CD
            , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = B.ENT_STLE_CD) AS ENT_STLE_CD_NM
            , TO_CHAR(TO_DATE(B.ENT_FNDN_YMD, 'YYYYMMDD'), 'YYYY.MM.DD') AS ENT_FNDN_YMD
            , B.ENT_HMPG_URL
            , B.ENT_RPRSNTV_NM
            , (SELECT F.FILE_PATH_NM FROM FILE_DT F WHERE F.FILE_GROUP_SN = B.ENT_LOGO) AS ENT_LOGO
            , SUBSTR(B.ENT_FXNUM, 1, 3) || '-' || 
               SUBSTR(B.ENT_FXNUM, 4, 3) || '-' || 
                SUBSTR(B.ENT_FXNUM, 7, 4) AS ENT_FXNUM
            , PR.PROCSS_CD
            , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = PR.PROCSS_CD) AS PROCSS_CD_NM
            , (SELECT LISTAGG(F.FAVOR_CN, ',') WITHIN GROUP (ORDER BY F.FAVOR_CN)
                 FROM TBC_FAVOR F
                 WHERE F.PBANC_NO = A.PBANC_NO) AS FAVOR_CN
            , R.RCRIT_NM
            , R.RCRIT_CNT 
            , R.RCRIT_JBTTL_CD
            , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = R.RCRIT_JBTTL_CD) AS RCRIT_JBTTL_CD_NM
            , R.RCRIT_DEPT
            , R.RCRIT_TASK
            , (SELECT LISTAGG(P.REQUIRED_CN, ',') WITHIN GROUP (ORDER BY P.REQUIRED_CN)
                 FROM TBC_PRIVILEGED P
                 WHERE P.PBANC_NO = A.PBANC_NO) AS REQUIRED_CN         
            , (SELECT LISTAGG(TP.PREFER_CN, ',') WITHIN GROUP (ORDER BY TP.PREFER_CN)
                 FROM TBC_PREFER TP
                 WHERE TP.PBANC_NO = A.PBANC_NO) AS PREFER_CN      
            , (SELECT LISTAGG(C.COM_CODE_NM, ',') WITHIN GROUP (ORDER BY C.COM_CODE)
                 FROM TBC_ADDR T
                 JOIN CODE C ON C.COM_CODE = T.POWK_CD
                 WHERE T.PBANC_NO = A.PBANC_NO) AS POWK_NM
            , (SELECT LISTAGG(C.COM_CODE_NM, ',') WITHIN GROUP (ORDER BY C.COM_CODE)
                 FROM TBC_INDUTY I
                 JOIN CODE C ON C.COM_CODE = I.TPBIZ_CD
                 WHERE I.PBANC_NO = A.PBANC_NO) AS TPBIZ_CD 
      FROM PBANC A
      JOIN ENTER B ON A.ENT_ID = B.ENT_ID
      LEFT JOIN TBC_RECRUITMENT R ON A.PBANC_NO = R.PBANC_NO
      LEFT JOIN TBC_PROCSS PR ON A.PBANC_NO = PR.PBANC_NO
      WHERE A.PBANC_NO = #{pbancNo}
        AND A.PBANC_DEL_YN = 1
   </select>
   
   <!-- 공고지역대장 -->
   <select id="getpowkCdList" resultMap="codeMap">
      SELECT * FROM CODE 
      WHERE COM_CODE_GRP = 'WRGN'
      AND UPPER_COM_CODE IS NULL   
   </select>
   
   
   <!-- 스크랩 추가 -->
    <insert id="addScrap" parameterType="hashMap">
        INSERT INTO SCRAP (PBANC_NO, MBR_ID)
        VALUES (LPAD(#{pbancNo}, 4, '0'), #{mbrId})
    </insert>   
    
    <!-- 스크랩 취소 -->
    <delete id="cancelScrap" parameterType="hashMap">
        DELETE FROM SCRAP WHERE pbanc_no = LPAD(#{pbancNo}, 4, '0') AND mbr_id = #{mbrId}
    </delete>   
   
   <!-- 스크랩 수 조회 -->
    <select id="getScrapCount" resultType="int">
        SELECT COUNT(*) FROM SCRAP WHERE PBANC_NO =LPAD(#{pbancNo}, 4, '0')
    </select>
    <!-- 스크랩 회원 여부 -->
    <select id="getscrap" parameterType="hashMap" resultType="int">
    	SELECT count(*) FROM SCRAP WHERE PBANC_NO = #{pbancNo} AND MBR_ID = #{loggedInMbrId}
    </select>
   <!-- 공고삭ㅔ제 -->
   <update id="pbancDelete" parameterType="map">
      UPDATE PBANC 
      SET PBANC_DEL_YN = 2
      WHERE ENT_ID = #{entId}
      AND PBANC_NO = #{pbancNo}   
   </update>


   <!-- 공고 수정 1 : PBANC UPDATE -->
   <update id="pbancUpdate" parameterType="PbancVO">
      UPDATE PBANC
      SET 
          PBANC_TTL = #{pbancTtl}
        , PBANC_CN = #{pbancCn}
        , PBANC_CAREER_CD = #{pbancCareerCd}
        , PBANC_APLCT_EDU_CD = #{pbancAplctEduCd}
        , PBANC_GEN_CD = #{pbancGenCd}
        , PBANC_AGE_CD = #{pbancAgeCd}
        , PBANC_SALARY = #{pbancSalary}
        , PBANC_WORKSTLE_CD = #{pbancWorkstleCd}
        , PBANC_WORK_DAY_CD = #{pbancWorkDayCd}
        , PBANC_WORK_HR_CD = #{pbancWorkHrCd}
        , PBANC_RPRS_DTY = #{pbancRprsDty}
        , PBANC_DDLN_DT = #{pbancDdlnDts}
        , PBANC_BGNG_DT = #{pbancBgngDts}
        , PBANC_RCPT_MTHD_CD = #{pbancRcptMthdCd}
        , PBANC_APPOFE_FORM_CD = #{pbancAppofeFormCd}
      WHERE PBANC_NO = #{pbancNo}
   </update>

   <!-- 공고 수정 전 favor 삭제 -->
   <delete id="favorDelete" parameterType="PbancVO">
      DELETE FROM TBC_FAVOR WHERE PBANC_NO = #{pbancNo}
   </delete>
   <!-- 공고 수정 2 : FAVOR UPDATE -->
   <insert id="favorUpdate" parameterType="PbancVO">   
      INSERT INTO TBC_FAVOR
      (FAVOR_CN,
       PBANC_NO 
      )
      VALUES(
      #{favorCn},
      #{pbancNo}
      )      
   </insert>
   
   <!-- 공고 수정 3 : TBC_RECRUITMENT UPDATE -->
   <update id="recruitmentUpdate" parameterType="PbancVO">
      UPDATE TBC_RECRUITMENT
      SET RCRIT_NM = #{rcritNm}
        , RCRIT_JBTTL_CD = #{rcritJbttlCd}
        , RCRIT_TASK = #{rcritTask}   
        , RCRIT_DEPT = #{rcritDept}
        , RCRIT_CAREER_CD = #{pbancCareerCd}
        , RCRIT_CNT = #{rcritCnt}
      WHERE PBANC_NO = #{pbancNo}
   </update>
   
   <!-- 공고 수정 4 전 삭제 -->
   <delete id="procssDelete" parameterType="PbancVO">
   		DELETE FROM TBC_PROCSS WHERE PBANC_NO = #{pbancNo}
   </delete>
   <!-- 공고 수정 4 : TBC_PROCSS UPDATE -->  
  	<insert id="procssUpdate" parameterType="PbancVO">
  		INSERT INTO TBC_PROCSS(PROCSS_CD,PBANC_NO)
  		VALUES(#{procssCd},#{pbancNo})
  	</insert> 
   <!-- 공고 수정 5 : file -->
   <update id="fileUpdate" parameterType="PbancVO">
      UPDATE PBANC
         SET PBANC_IMG_FILE = #{fileGroupSn}
       WHERE PBANC_NO = #{pbancNo}
   </update>


   <!-- 공고 수정 6 전  업종 삭제 -->
   <delete id="tpbizDelete" parameterType="PbancVO">
      DELETE FROM TBC_INDUTY WHERE PBANC_NO = #{pbancNo}
   </delete>   
   <!-- 공고수정 6: 업종 tpbiz -->
   <insert id="tpbizUpdate" parameterType="PbancVO">
      INSERT INTO TBC_INDUTY
      (TPBIZ_CD,
       PBANC_NO 
      )
      VALUES(
      #{tpbizCd},
      #{pbancNo}
      )
   </insert>

   <!-- 공고 수정 7 전 지역 삭제 -->
   <delete id="powkDelete" parameterType="PbancVO">
      DELETE FROM TBC_ADDR WHERE PBANC_NO = #{pbancNo}
   </delete>
   <!-- 공고 수정 7 : TBC_ADDR UPDATE -->
   <insert id="addrUpdate" parameterType="PbancVO">
      INSERT INTO TBC_ADDR
             (POWK_CD,
             PBANC_NO
             )
        VALUES(
              #{powkCd},
              #{pbancNo}
              )
   </insert>   


   <!-- 공고 수정 8 전 필수 삭제 -->
   <delete id="privilegedDelete" parameterType="PbancVO">
      DELETE FROM TBC_PRIVILEGED WHERE PBANC_NO = #{pbancNo}
   </delete>
   <!-- 공고 수정 8 : TBC_PRIVILEGED UPDATE -->
   <insert id="privilegedUpdate" parameterType="PbancVO">
      INSERT INTO TBC_PRIVILEGED
      (  REQUIRED_CN, PBANC_NO )    
      VALUES( #{requiredCn}, #{pbancNo})
   </insert>
   
   <!-- 공고 수정 9 전 필수 삭제 -->
   <delete id="preferDelete" parameterType="PbancVO">
      DELETE FROM TBC_PREFER WHERE PBANC_NO = #{pbancNo}
   </delete>
   
   <!-- 공고 수정 9 : TBC_PREFER UPDATE -->
   <insert id="preferUpdate" parameterType="PbancVO">
      INSERT INTO TBC_PREFER
      ( PREFER_CN, PBANC_NO )    
      VALUES(#{preferCn}, #{pbancNo})
   </insert>


   <!-- 공고등록  - 기업정보 조회 -->
   <select id="getEntInfor" parameterType="String" resultType="enterVO">
      SELECT ENT_RPRSNTV_NM
          , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = TPBIZ_SE_CD) AS TPBIZ_SE_CD
           , ENT_ZIP
           , ENT_ADDR
           , ENT_ADDR_DETAIL
           , ENT_FXNUM
           , ENT_MAIL
           , ENT_ID
           , ENT_NM
      FROM ENTER
      WHERE ENT_ID = #{entId}
   </select>
   
   <!-- 공고등록 - 카카오맵 -->
   <select id="location" parameterType="String" resultType="enterVO">
      SELECT ENT_ADDR
           , ENT_ADDR_DETAIL
        FROM ENTER
       WHERE ENT_ID = #{entId}    
   </select>   
   
   <!-- 공고등록 : pbanc -->
   <insert id="pbancInsertPost1" parameterType="pbancVO">
      <selectKey resultType="String" order="BEFORE" keyProperty="pbancNo">
         SELECT LPAD(TO_CHAR(TO_NUMBER(NVL(MAX(PBANC_NO), '0')) + 1), 4, '0')  FROM PBANC
      </selectKey>   
      INSERT INTO PBANC (
         ENT_ID,
         PBANC_NO,         
          PBANC_TTL, 
          PBANC_CN, 
          PBANC_CAREER_CD, 
          PBANC_APLCT_EDU_CD, 
          PBANC_GEN_CD, 
          PBANC_AGE_CD, 
          PBANC_SALARY, 
          PBANC_WORKSTLE_CD, 
          PBANC_WORK_DAY_CD, 
          PBANC_WORK_HR_CD, 
          PBANC_RPRS_DTY, 
          PBANC_DDLN_DT, 
          PBANC_BGNG_DT, 
          PBANC_RCPT_MTHD_CD, 
          PBANC_APPOFE_FORM_CD
      ) 
      VALUES (
         #{entId},
         #{pbancNo},
          #{pbancTtl}, 
          #{pbancCn}, 
          #{pbancCareerCd}, 
          #{pbancAplctEduCd}, 
          #{pbancGenCd,jdbcType=VARCHAR}, 
          #{pbancAgeCd,jdbcType=VARCHAR}, 
          #{pbancSalary}, 
          #{pbancWorkstleCd}, 
          #{pbancWorkDayCd,jdbcType=VARCHAR}, 
          #{pbancWorkHrCd,jdbcType=VARCHAR}, 
          #{pbancRprsDty,jdbcType=VARCHAR},  
          #{pbancDdlnDts}, 
          #{pbancBgngDts}, 
          #{pbancRcptMthdCd}, 
          #{pbancAppofeFormCd}
      )   
   </insert>
   
   <!-- 공고등록 : FAVOR -->
   <insert id="pbancInsertPost2" parameterType="pbancVO">
      INSERT INTO TBC_FAVOR (
          PBANC_NO,
          FAVOR_CN
      ) 
      VALUES (#{pbancNo}, #{favorCn})   
   </insert>
   
   <!-- 공고등록: recruitment-->
   <insert id="pbancInsertPost3" parameterType="pbancVO">
      <selectKey resultType="String" order="BEFORE" keyProperty="rcritNo">
         SELECT TO_CHAR(TO_NUMBER(NVL(MAX(RCRIT_NO), '0')) + 1) FROM TBC_RECRUITMENT
      </selectKey>   
      INSERT INTO TBC_RECRUITMENT (
         RCRIT_NO,
          PBANC_NO,
          RCRIT_NM, 
          RCRIT_JBTTL_CD, 
          RCRIT_TASK, 
          RCRIT_DEPT, 
          RCRIT_CAREER_CD, 
          RCRIT_CNT
      ) 
      VALUES (
         #{rcritNo},
         #{pbancNo},      
          #{rcritNm,jdbcType=VARCHAR}, 
          #{rcritJbttlCd,jdbcType=VARCHAR}, 
          #{rcritTask,jdbcType=VARCHAR}, 
          #{rcritDept,jdbcType=VARCHAR}, 
          #{pbancCareerCd,jdbcType=VARCHAR}, 
          #{rcritCnt,jdbcType=VARCHAR}
      )   
   </insert>
   
   <!-- 공고등록: procss-->
   <insert id="pbancInsertPost4" parameterType="pbancVO">   
      INSERT INTO TBC_PROCSS (
          PBANC_NO,
          PROCSS_CD
      ) 
      VALUES (
         #{pbancNo},      
          #{procssCd}
      )   
   </insert>
   <!-- 공고등록: file-->
   <insert id="pbancInsertPost5" parameterType="pbancVO">   
      UPDATE PBANC 
      SET PBANC_IMG_FILE= #{fileGroupSn,jdbcType=VARCHAR}
      WHERE PBANC_NO = #{pbancNo}
   </insert>

   <!-- 공고등록: 기업정보-->
   <insert id="pbancInsertPost6" parameterType="pbancVO">   
      INSERT INTO TBC_INDUTY (
          PBANC_NO,
          TPBIZ_CD
      ) 
      VALUES (
         #{pbancNo},      
          #{tpbizCd}
      )   
   </insert>   
   
   <!-- 공고등록: 지역 -->
   <insert id="pbancInsertPost7" parameterType="pbancVO">   
      INSERT INTO TBC_ADDR (
          PBANC_NO,
          POWK_CD
      ) 
      VALUES (
         #{pbancNo},      
          #{powkCd}
      )   
   </insert>      
   
   <!-- 공고등록 : 필수조건 -->
   <insert id="pbancInsertPost8" parameterType="PbancVO">
      INSERT INTO TBC_PRIVILEGED
      (  REQUIRED_CN, PBANC_NO )    
      VALUES( #{requiredCn}, #{pbancNo})
   </insert>   
   <!-- 공고등록 : 우대조건 -->
   <insert id="pbancInsertPost9" parameterType="PbancVO">
      INSERT INTO TBC_PREFER
      ( PREFER_CN, PBANC_NO )    
      VALUES(#{preferCn}, #{pbancNo})
   </insert>   
   
   
   
   <!-- 공고임시저장 : pbanc -->
   <insert id="pbancSavePost1" parameterType="pbancVO">
      <selectKey resultType="String" order="BEFORE" keyProperty="pbancNo">
         SELECT LPAD(TO_CHAR(TO_NUMBER(MAX(PBANC_NO)) + 1), 4, '0') FROM PBANC
      </selectKey>   
      INSERT INTO PBANC (
         ENT_ID,
         PBANC_NO,         
          PBANC_TTL, 
          PBANC_CN, 
          PBANC_CAREER_CD, 
          PBANC_APLCT_EDU_CD, 
          PBANC_GEN_CD, 
          PBANC_AGE_CD, 
          PBANC_SALARY, 
          PBANC_WORKSTLE_CD, 
          PBANC_WORK_DAY_CD, 
          PBANC_WORK_HR_CD, 
          PBANC_RPRS_DTY, 
          PBANC_DDLN_DT, 
          PBANC_BGNG_DT, 
          PBANC_RCPT_MTHD_CD, 
          PBANC_APPOFE_FORM_CD,
          PBANC_STTUS
      ) 
      VALUES (
         #{entId},
         #{pbancNo},
          #{pbancTtl}, 
          #{pbancCn,jdbcType=VARCHAR}, 
          #{pbancCareerCd,jdbcType=VARCHAR}, 
          #{pbancAplctEduCd,jdbcType=VARCHAR}, 
          #{pbancGenCd,jdbcType=VARCHAR}, 
          #{pbancAgeCd,jdbcType=VARCHAR}, 
          #{pbancSalary,jdbcType=VARCHAR}, 
          #{pbancWorkstleCd,jdbcType=VARCHAR}, 
          #{pbancWorkDayCd,jdbcType=VARCHAR}, 
          #{pbancWorkHrCd,jdbcType=VARCHAR}, 
          #{pbancRprsDty,jdbcType=VARCHAR}, 
          #{pbancDdlnDts,jdbcType=VARCHAR}, 
          #{pbancBgngDts,jdbcType=VARCHAR}, 
          #{pbancRcptMthdCd,jdbcType=VARCHAR}, 
          #{pbancAppofeFormCd,jdbcType=VARCHAR},
          '2'
      )   
   </insert>
   
   <!-- 공고임시저장 : FAVOR -->
<!--    <insert id="pbancSavePost2" parameterType="pbancVO"> -->
<!--       INSERT INTO TBC_FAVOR ( -->
<!--           PBANC_NO, -->
<!--           FAVOR_CN -->
<!--       )  -->
<!--       VALUES ( -->
<!--          #{pbancNo},       -->
<!--           #{favorCn} -->
<!--       )    -->
<!--    </insert> -->
   
   <!-- 공고임시저장: recruitment-->
<!--    <insert id="pbancSavePost3" parameterType="pbancVO"> -->
<!--       <selectKey resultType="String" order="BEFORE" keyProperty="rcritNo"> -->
<!--          SELECT TO_CHAR(TO_NUMBER(MAX(RCRIT_NO)) + 1) FROM TBC_RECRUITMENT -->
<!--       </selectKey>    -->
<!--       INSERT INTO TBC_RECRUITMENT ( -->
<!--          RCRIT_NO, -->
<!--           PBANC_NO, -->
<!--           RCRIT_NM,  -->
<!--           RCRIT_JBTTL_CD,  -->
<!--           RCRIT_TASK,  -->
<!--           RCRIT_DEPT,  -->
<!--           RCRIT_CAREER_CD,  -->
<!--           RCRIT_CNT -->
<!--       )  -->
<!--       VALUES ( -->
<!--          #{rcritNo}, -->
<!--          #{pbancNo},       -->
<!--           #{rcritNm},  -->
<!--           #{rcritJbttlCd},  -->
<!--           #{rcritTask},  -->
<!--           #{rcritDept},  -->
<!--           #{pbancCareerCd},  -->
<!--           #{rcritCnt} -->
<!--       )    -->
<!--    </insert> -->
   
   <!-- 공고임시저장: procss-->
<!--    <insert id="pbancSavePost4" parameterType="pbancVO">    -->
<!--       INSERT INTO TBC_PROCSS ( -->
<!--           PBANC_NO, -->
<!--           PROCSS_CD -->
<!--       )  -->
<!--       VALUES ( -->
<!--          #{pbancNo},       -->
<!--           #{procssCd} -->
<!--       )    -->
<!--    </insert> -->
   
   <!-- 공고임시저장: file-->
<!--    <insert id="pbancSavePost5" parameterType="pbancVO">    -->
<!--       UPDATE PBANC  -->
<!--       SET PBANC_IMG_FILE= #{fileGroupSn} -->
<!--       WHERE PBANC_NO = #{pbancNo} -->
<!--    </insert> -->

   <!-- 공고임시저장: 업종-->
<!--    <insert id="pbancSavePost6" parameterType="pbancVO">    -->
<!--       INSERT INTO TBC_INDUTY ( -->
<!--           PBANC_NO,  -->
<!--           TPBIZ_CD -->
<!--       )  -->
<!--       VALUES ( -->
<!--          #{pbancNo},       -->
<!--           #{tpbizCd} -->
<!--       )    -->
<!--    </insert>    -->
   
   
   <!-- 공고 임시저장 -->
   <select id="tempPbanc" parameterType="map" resultMap="pbancMap">
      WITH T AS (
         SELECT ROW_NUMBER() OVER (ORDER BY <include refid="pbancOrderby"></include>) AS RNUM    
                  , B.ENT_NM
                  , A.PBANC_NO
                  , B.ENT_ID
               , TO_CHAR(A.PBANC_WRT_DT, 'YYYY.MM.DD') AS PBANC_WRT_DT 
                , TO_CHAR(A.PBANC_MDFCN_DT, 'YYYY.MM.DD') AS PBANC_MDFCN_DT
                , TO_CHAR(A.PBANC_DDLN_DT, 'YYYY.MM.DD') AS PBANC_DDLN_DT
                , TO_CHAR(A.PBANC_BGNG_DT, 'YYYY.MM.DD') AS PBANC_BGNG_DT
                 , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE=B.ENT_STLE_CD) AS ENT_STLE_NM
               , A.PBANC_TTL
               , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE=A.PBANC_RPRSRGN)AS PBANC_RPRSRGN_NM
               , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE=A.PBANC_APLCT_EDU_CD) AS PBANC_APLCT_EDU
               , TO_CHAR(A.PBANC_DDLN_DT,'MM.DD(DY)') AS PBANC_DLN_DT
               , TRUNC(SYSDATE-A.PBANC_WRT_DT) AS PBANC_BEFORE_WRT
               , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = D.RCRIT_CAREER_CD) AS RCRIT_CAREER_NM
               , (SELECT LISTAGG(C.COM_CODE_NM,',') WITHIN GROUP(ORDER BY C.COM_CODE) FROM CODE C WHERE C.COM_CODE IN(SELECT TPBIZ_CD FROM TBC_INDUTY I WHERE I.PBANC_NO = A.PBANC_NO)) AS PBANC_TPBIZ_NM
            FROM PBANC A, ENTER B, TBC_RECRUITMENT D
            WHERE A.ENT_ID=B.ENT_ID
            AND A.PBANC_NO = D.PBANC_NO
            AND A.ENT_ID = #{entId}
            AND (A.PBANC_DDLN_DT IS NULL OR A.PBANC_DDLN_DT > SYSDATE-1)
            AND A.PBANC_DEL_YN = 1
            AND A.PBANC_STTUS = 2
            <include refid="pbanc"></include>
      )
      SELECT * 
      FROM T
      WHERE T.RNUM BETWEEN (#{currentPage} - 1) * 5 + 1 AND #{currentPage} * 5   
   </select>

      <!-- 전체 행의 수(임시저장) -->
      <select id="getTotalTempPbanc" parameterType="hashMap" resultType="int">
       SELECT COUNT(*)
            FROM PBANC A, ENTER B, TBC_RECRUITMENT D
            WHERE A.ENT_ID=B.ENT_ID
            AND A.PBANC_NO = D.PBANC_NO
            AND A.ENT_ID = #{entId}
            AND A.PBANC_DDLN_DT  > SYSDATE-1
            AND A.PBANC_DEL_YN = 1
            AND A.PBANC_STTUS = 2
         <include refid="pbanc"></include>   
      </select>  
            
   <!-- 공고임시저장 저장 : pbanc -->
   <update id="pbancTempInsertPost1" parameterType="PbancVO">
      UPDATE PBANC
      SET 
          PBANC_TTL = #{pbancTtl}
        , PBANC_CN = #{pbancCn}
        , PBANC_CAREER_CD = #{pbancCareerCd}
        , PBANC_APLCT_EDU_CD = #{pbancAplctEduCd}
        , PBANC_GEN_CD = #{pbancGenCd}
        , PBANC_AGE_CD = #{pbancAgeCd}
        , PBANC_SALARY = #{pbancSalary}
        , PBANC_WORKSTLE_CD = #{pbancWorkstleCd}
        , PBANC_WORK_DAY_CD = #{pbancWorkDayCd}
        , PBANC_WORK_HR_CD = #{pbancWorkHrCd}
        , PBANC_RPRS_DTY = #{pbancRprsDty}
        , PBANC_DDLN_DT = #{pbancDdlnDts}
        , PBANC_BGNG_DT = #{pbancBgngDts}
        , PBANC_RCPT_MTHD_CD = #{pbancRcptMthdCd}
        , PBANC_APPOFE_FORM_CD = #{pbancAppofeFormCd}
        , PBANC_STTUS ='1'
      WHERE PBANC_NO = #{pbancNo}
    </update>

   <!-- 공고임시저장 -> 임시저장 버튼 실행 : pbanc -->
   <update id="retempPbancSavePost1" parameterType="PbancVO">
      UPDATE PBANC
      SET 
          PBANC_TTL = #{pbancTtl}
        , PBANC_CN = #{pbancCn}
        , PBANC_CAREER_CD = #{pbancCareerCd}
        , PBANC_APLCT_EDU_CD = #{pbancAplctEduCd}
        , PBANC_GEN_CD = #{pbancGenCd}
        , PBANC_AGE_CD = #{pbancAgeCd}
        , PBANC_SALARY = #{pbancSalary}
        , PBANC_WORKSTLE_CD = #{pbancWorkstleCd}
        , PBANC_WORK_DAY_CD = #{pbancWorkDayCd}
        , PBANC_WORK_HR_CD = #{pbancWorkHrCd}
        , PBANC_RPRS_DTY = #{pbancRprsDty}
        , PBANC_DDLN_DT = #{pbancDdlnDts}
        , PBANC_BGNG_DT = #{pbancBgngDts}
        , PBANC_RCPT_MTHD_CD = #{pbancRcptMthdCd}
        , PBANC_APPOFE_FORM_CD = #{pbancAppofeFormCd}
        , PBANC_STTUS ='2'
      WHERE PBANC_NO = #{pbancNo}
    </update>

            
   <!-- 지원자리스트 -->
   <select id="aplctList" parameterType="map" resultMap="applicantMap">
    WITH T AS (
       SELECT ROW_NUMBER() OVER (ORDER BY A.APLCT_APPYMD DESC) AS RNUM
           , A.MBR_ID
           , A.PBANC_NO
           , TO_CHAR(A.APLCT_APPYMD, 'YYYY.MM.DD') AS APLCT_APPYMDS
           , A.RSM_TTL
           , A.RSM_NO
           , A.APLCT_PRCS_STAT_CD
           , (SELECT FILE_PATH_NM FROM FILE_DT F WHERE FILE_GROUP_SN = A.APLCT_FILE) AS APLCT_FILE
           , (SELECT ORGNL_FILE_NM FROM FILE_DT F WHERE FILE_GROUP_SN = A.APLCT_FILE) AS APLCT_FILE_NM
           , A.APLCT_VIEWSTTUS
           , A.APLCT_CANCEL_CD
           , B.MBR_NM
         <![CDATA[
          , CASE 
                WHEN LENGTH(P.PBANC_TTL) <= 25 THEN P.PBANC_TTL
                ELSE CONCAT(SUBSTR(P.PBANC_TTL, 1, 25), '...')
             END AS PBANC_TTL
           , TO_CHAR(P.PBANC_DDLN_DT, 'YYYY.MM.DD') AS PBANC_DDLN_DT
           , NVL(TO_CHAR(TO_DATE(C.INTRVW_YMD, 'YYYY/MM/DDHH24MISS'), 'YYYY.MM.DD'),'-') AS INTRVW_YMD
             , CASE 
                   WHEN (SELECT LISTAGG(D.COM_CODE_NM, ', ') WITHIN GROUP (ORDER BY D.COM_CODE)
                         FROM PRF_SKILL S
                         JOIN CODE D ON D.COM_CODE = S.SK_CD
                         WHERE S.MBR_ID = A.MBR_ID) IS NULL THEN ' '
                   WHEN LENGTH((SELECT LISTAGG(D.COM_CODE_NM, ', ') WITHIN GROUP (ORDER BY D.COM_CODE)
                                FROM PRF_SKILL S
                                JOIN CODE D ON D.COM_CODE = S.SK_CD
                                WHERE S.MBR_ID = A.MBR_ID)) <= 20 
                   THEN (SELECT LISTAGG(D.COM_CODE_NM, ', ') WITHIN GROUP (ORDER BY D.COM_CODE)
                         FROM PRF_SKILL S
                         JOIN CODE D ON D.COM_CODE = S.SK_CD
                         WHERE S.MBR_ID = A.MBR_ID)
                   ELSE SUBSTR((SELECT LISTAGG(D.COM_CODE_NM, ', ') WITHIN GROUP (ORDER BY D.COM_CODE)
                                FROM PRF_SKILL S
                                JOIN CODE D ON D.COM_CODE = S.SK_CD
                                WHERE S.MBR_ID = A.MBR_ID), 1, 20) || '...'
                   END AS SK_CD      
           , (SELECT DECODE(MAX(PC.CAREER_NO), NULL, '신입', '경력') 
                      FROM PRF_CAREER PC 
                      WHERE B.MBR_ID = PC.MBR_ID) AS RSM_CAREER_CD
          , (SELECT FILE_PATH_NM FROM FILE_DT F WHERE FILE_GROUP_SN = B.FILE_GROUP_SN) AS   FILE_GROUP_SN
             , (SELECT ORGNL_FILE_NM FROM FILE_DT F WHERE FILE_GROUP_SN = B.FILE_GROUP_SN) AS   FILE_NM
             , PR.PROCSS_CD
        ]]>
        FROM APPLICANT A
          LEFT OUTER JOIN INTERVIEW C ON A.PBANC_NO = C.PBANC_NO AND C.ENT_ID = #{entId}
          LEFT OUTER JOIN TBC_PROCSS PR ON A.PBANC_NO = PR.PBANC_NO
      JOIN MEMBER B ON A.MBR_ID = B.MBR_ID
      JOIN PBANC P ON A.PBANC_NO = P.PBANC_NO 
      WHERE P.ENT_ID = #{entId}

         <include refid="aplct"></include>            
    )
       SELECT * 
       FROM T
       WHERE T.RNUM BETWEEN (#{currentPage} - 1) * 5 + 1 AND #{currentPage} * 5         
   </select>
   
   <!-- 지원자 리스트 엑셀 -->
   <select id="AplctListExcel" parameterType="map" resultMap="applicantMap">
        SELECT ROW_NUMBER() OVER (ORDER BY A.APLCT_APPYMD DESC) AS RNUM
           , A.MBR_ID
           , A.PBANC_NO
           , TO_CHAR(A.APLCT_APPYMD, 'YYYY.MM.DD') AS APLCT_APPYMDS
           , A.RSM_TTL
           , A.RSM_NO
           , A.APLCT_PRCS_STAT_CD
           , (SELECT C.COM_CODE_NM FROM CODE C WHERE C.COM_CODE = A.APLCT_PRCS_STAT_CD) APLCT_PRCS_STAT_CD_NM
           , (SELECT FILE_PATH_NM FROM FILE_DT F WHERE FILE_GROUP_SN = A.APLCT_FILE) AS APLCT_FILE
           , (SELECT ORGNL_FILE_NM FROM FILE_DT F WHERE FILE_GROUP_SN = A.APLCT_FILE) AS APLCT_FILE_NM
           , A.APLCT_VIEWSTTUS
           , A.APLCT_CANCEL_CD
           , B.MBR_NM
         <![CDATA[
          , P.PBANC_TTL
           , TO_CHAR(P.PBANC_DDLN_DT, 'YYYY.MM.DD') AS PBANC_DDLN_DT
           , NVL(TO_CHAR(TO_DATE(C.INTRVW_YMD, 'YYYY/MM/DDHH24MISS'), 'YYYY.MM.DD'),'-') AS INTRVW_YMD
          , (SELECT LISTAGG(D.COM_CODE_NM, ', ') WITHIN GROUP (ORDER BY D.COM_CODE)
                                FROM PRF_SKILL S
                                JOIN CODE D ON D.COM_CODE = S.SK_CD
                                WHERE S.MBR_ID = A.MBR_ID) AS SK_CD
           , (SELECT DECODE(MAX(PC.CAREER_NO), NULL, '신입', '경력') 
                      FROM PRF_CAREER PC 
                      WHERE B.MBR_ID = PC.MBR_ID) AS RSM_CAREER_CD
          , (SELECT FILE_PATH_NM FROM FILE_DT F WHERE FILE_GROUP_SN = B.FILE_GROUP_SN) AS   FILE_GROUP_SN
             , (SELECT ORGNL_FILE_NM FROM FILE_DT F WHERE FILE_GROUP_SN = B.FILE_GROUP_SN) AS   FILE_NM
             , PR.PROCSS_CD
        ]]>
        FROM APPLICANT A
          LEFT OUTER JOIN INTERVIEW C ON A.PBANC_NO = C.PBANC_NO AND C.ENT_ID = #{entId}
          LEFT OUTER JOIN TBC_PROCSS PR ON A.PBANC_NO = PR.PBANC_NO
      JOIN MEMBER B ON A.MBR_ID = B.MBR_ID
      JOIN PBANC P ON A.PBANC_NO = P.PBANC_NO 
      WHERE P.ENT_ID = #{entId}
   </select>
   
   <!-- 지원자상태저장 -->
   <update id="updateAplctSt" parameterType="map">
      UPDATE APPLICANT A
      SET A.APLCT_PRCS_STAT_CD = #{status}
      WHERE A.MBR_ID = #{mbrId}
        AND A.PBANC_NO = #{pbancNo}
        AND EXISTS (SELECT 1 
                      FROM PBANC P 
                     WHERE A.PBANC_NO = P.PBANC_NO)      
   </update>
   
   <!-- 지원자상태저장시 면접관리 추가 -->
   <insert id="updateAplctIntrvw" parameterType="map">
   <selectKey order="BEFORE" keyProperty="intrvwNo" resultType="String">
      SELECT LPAD(TO_CHAR(NVL(MAX(TO_NUMBER(INTRVW_NO)), 0) + 1), 4, '0') FROM INTERVIEW
   </selectKey>
      INSERT INTO INTERVIEW(INTRVW_NO,PBANC_NO,MBR_ID,ENT_ID,INTRVW_TY_CD)
      VALUES(#{intrvwNo},#{pbancNo},#{mbrId},#{entId},#{intrvwCd})
   </insert>
   
   <!-- 지원자상태 저장시 interview 테이블 존재 유무 확인 -->
   <select id="intrvwChk" parameterType="hashMap" resultType="int">
      SELECT count(*) FROM INTERVIEW 
      WHERE PBANC_NO = #{pbancNo}
      AND ENT_ID = #{entId}
      AND MBR_ID = #{mbrId}
   </select>
   
   <!--  지원자 리스트 셀렉박스 공고 꺼내기 --> 
   <select id="entPbancList" parameterType="map" resultMap="pbancMap">
      SELECT DISTINCT CONCAT(SUBSTR(PBANC_TTL,0,20),'...') AS PBANC_TTL
      FROM PBANC
      WHERE ENT_ID = #{entId}
   </select>


   <!-- 전체 행의 수(지원자리스트) -->
   <select id="getTotalListAplct" parameterType="hashMap" resultType="int">
       SELECT COUNT(*)
        FROM APPLICANT A
          LEFT OUTER JOIN INTERVIEW C ON A.PBANC_NO = C.PBANC_NO AND C.ENT_ID = #{entId}
      JOIN MEMBER B ON A.MBR_ID = B.MBR_ID
      JOIN PBANC P ON A.PBANC_NO = P.PBANC_NO 
      WHERE P.ENT_ID = #{entId}
      <include refid="aplct"></include>      
   </select>   
      
      <!-- 제안 아이디 꺼내기 -->
      <select id="proposalList" parameterType="hashMap" resultType="proposalVO">
         SELECT DISTINCT MBR_ID FROM PROPOSAL
      WHERE ENT_ID = #{entId}
      </select>
      
   <!-- 스카우트 제안 페이지 -->
   <select id="scoutList" parameterType="map" resultMap="proposalMap">
    WITH T AS (
       SELECT 
           ROW_NUMBER() OVER (ORDER BY P.PROPSE_DATE DESC) AS RNUM
           , P.PROPSE_TTL
           , P.PROPSE_CN
           , TO_CHAR(P.PROPSE_DATE, 'YYYY.MM.DD') AS PROPSE_DATES
           , (SELECT FILE_PATH_NM FROM FILE_DT F WHERE FILE_GROUP_SN = M.FILE_GROUP_SN) AS FILE_GROUP_SN
           , (SELECT ORGNL_FILE_NM FROM FILE_DT F WHERE FILE_GROUP_SN = M.FILE_GROUP_SN) AS FILE_NM
           , P.PROPSE_PBANC_TTL
           , M.MBR_NM
           , M.MBR_ID
           , FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(M.MBR_BRDT, 'YYYYMMDD')) / 12) AS MBR_BRDT
           , (SELECT DECODE(MAX(PC.CAREER_NO), NULL, '신입', '경력') 
               FROM PRF_CAREER PC 
               WHERE M.MBR_ID = PC.MBR_ID) AS RSM_CAREER_CD
           , E.ENT_NM
       FROM PROPOSAL P
       JOIN ENTER E ON P.ENT_ID = E.ENT_ID
       JOIN MEMBER M ON P.MBR_ID = M.MBR_ID
       WHERE E.ENT_ID = #{entId}
       AND M.MBR_BRDT IS NOT NULL
         <include refid="where"></include>      
    )
       SELECT * 
       FROM T
       WHERE T.RNUM BETWEEN (#{currentPage} - 1) * 5 + 1 AND #{currentPage} * 5      
   </select>
   
   <!-- 스카우트 제안 엑셀 -->
   <select id="scoutListExcel" parameterType="map" resultMap="proposalMap">
       SELECT 
           ROW_NUMBER() OVER (ORDER BY P.PROPSE_DATE DESC) AS RNUM
           , P.PROPSE_TTL
           , P.PROPSE_CN
           , TO_CHAR(P.PROPSE_DATE, 'YYYY.MM.DD') AS PROPSE_DATES
           , (SELECT FILE_PATH_NM FROM FILE_DT F WHERE FILE_GROUP_SN = M.FILE_GROUP_SN) AS FILE_GROUP_SN
           , (SELECT ORGNL_FILE_NM FROM FILE_DT F WHERE FILE_GROUP_SN = M.FILE_GROUP_SN) AS FILE_NM
           , P.PROPSE_PBANC_TTL
           , M.MBR_NM
           , M.MBR_ID
           , FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(M.MBR_BRDT, 'YYYYMMDD')) / 12) AS MBR_BRDT
           , (SELECT DECODE(MAX(PC.CAREER_NO), NULL, '신입', '경력') 
               FROM PRF_CAREER PC 
               WHERE M.MBR_ID = PC.MBR_ID) AS RSM_CAREER_CD
           , E.ENT_NM
       FROM PROPOSAL P
       JOIN ENTER E ON P.ENT_ID = E.ENT_ID
       JOIN MEMBER M ON P.MBR_ID = M.MBR_ID
       WHERE E.ENT_ID = #{entId}
       AND M.MBR_BRDT IS NOT NULL
   </select>

   <!-- 전체 행의 수(스카우트 제안)
               (조건이 있다면 조건도 포함되어야 함) -->
   <select id="getTotal" parameterType="hashMap" resultType="int">
         SELECT COUNT(*) 
         FROM PROPOSAL P
        JOIN ENTER E ON P.ENT_ID = E.ENT_ID
        JOIN MEMBER M ON P.MBR_ID = M.MBR_ID
       WHERE E.ENT_ID = #{entId}
         AND M.MBR_BRDT IS NOT NULL
         <include refid="where"></include>   
   </select>  
   
</mapper>