<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd">
		
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- 스프링 웹(view) 설정 파일 -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- static folder설정(정적 폴더 설정)=>css, images, upload, js 
		http://localhost/resources/
	-->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/upload/**" location="file:///C:/upload/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>
	
	
	<!-- 엑셀 
	컨트롤러에서 리턴한 뷰 이름과 출력할 뷰 클래스를 연결 -->
	<beans:bean id="scout"
	class="kr.or.ddit.api.ExcelView"/>
	<!-- 어노테이션이 붙은 클래스의 bean을 자동으로 생성해주는 패키지 설정
	모든 클래스는 이 패키지 안에 만드는 것을 권장한다. -->
	<context:component-scan base-package="kr.or.ddit"/>
	
	
	<!-- tiles 설정 시작 
	TilesConfigurer tilesConfigurer = new TilesConfigurer();
	tiles-config.xml : 타일즈 설정파일
	-->
	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/spring/tiles-config.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<beans:bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<beans:property name="order" value="1" />
	</beans:bean>
	<!-- tiles 설정 끝 -->

	
	<!-- websocket start -->
	<beans:bean id="myHandler" class="kr.or.ddit.api.socket" />
	<websocket:handlers>
		<websocket:mapping handler="myHandler" path="/alram" />
		<websocket:handshake-interceptors>
			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
		<websocket:sockjs websocket-enabled="true"/>
	</websocket:handlers>

	<!-- websocket end -->
	<!-- 스프링 시큐리티 애너테이션을 활성화 
		- Secured : 스프링 시큐리티 모듈을 지원하기 위한 애너테이션
		- PreAuthorize : 메서드가 실행되기 전에 적용할 접근 정책을 지정할 때 사용
		- PostAuthorize : 메서드가 실행된 후에 적용할 접근 정책을 지정할 때 사용
		
		pre-post-annotations="enabled" : PreAuthorize, PostAuthorize를 사용할 수 있게 됨
		secured-annotations="enabled" : Secured를 사용할 수 있게 됨
	-->
	<security:global-method-security pre-post-annotations="enabled"
	secured-annotations="enabled" />
	
	<context:component-scan base-package="kr.or.ddit" />
	
</beans:beans>











