<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags"%>
<script type="text/javascript" src="/resources/js/jquery.min.js"></script>
<script type="text/javascript" src="/resources/ckeditor5/ckeditor.js"></script>
<link rel="stylesheet" href="../../resources/assets/css/templatemo-cyborg-gaming.css">
<script type="text/javascript" src="/resources/js/sweetalert2.js"></script>
<!-- Spring Security 인증 정보를 가져오기 -->
<sec:authentication property="principal" var="prc"/>

<script src="https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js"></script><!-- 웹소켓 -->
<script type="text/javascript">
$(document).ready(function(){
    // 로그인한 사용자 정보 가져오기ㅈ
    var username = "${prc ne 'anonymousUser' ? prc.username : 'anonymousUser'}";
    console.log("현재 사용자: " + username);

//     WebSocket 연결
    connectWs();

    // 댓글 등록 버튼 클릭 시
    $('#submitComment').on("click", function(event) {
        event.preventDefault(); // 기본 폼 제출 막기

        const commentContent = $('#commentContent').val();  // 댓글 내용
        const pstSn = $('#pstSn').val();  // 게시글 번호

        if (commentContent === "") {
            Swal.fire({
                icon: 'info',
                title: '댓글 내용을 작성해주세요',
              });
            return;
        }
        
        var isAnonymous = '${prc eq "anonymousUser"}';
        if (isAnonymous === 'true') {
        	 Swal.fire({
                 title: '로그인 후 댓글 작성 할 수 있습니다.?',
                 text: "로그인 페이지로 이동하시겠습니까?",
                 icon: 'warning',
                 showCancelButton: true,
                 confirmButtonColor: '#3085d6',
                 cancelButtonColor: '#d33',
                 confirmButtonText: '이동',
                 cancelButtonText: '취소',
                 reverseButtons: true,
                 
               }).then((result) => {
                 if (result.isConfirmed) {
                   window.location.href = "/security/login"
                 }
               })
            return;
        }

        // Ajax로 댓글 등록 요청
        $.ajax({
            url: '/common/freeBoard/registReplyPost',
            type: 'POST',
            data: {
                commentContent: commentContent,
                pstSn: pstSn
            },
            beforeSend: function(xhr) {
                xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
            },
            success: function(response) {
                // 댓글 등록 후 WebSocket으로 메시지 전송
                if (socket && username !== "anonymousUser") {
                    const websocketMessage = `댓글 등록: ${commentContent}`;
                    socket.send(websocketMessage);
                    console.log("WebSocket 메시지 전송: " + websocketMessage);
                }
                location.reload(); // 댓글 목록 갱신
            },
            error: function(xhr, status, error) {
                alert('댓글 등록 실패: ' + error);
            }
        });
    });

});
</script>


<script type="text/javascript">
ClassicEditor.create(document.querySelector('#pstCnTemp'))
.then(editor => {
    editor.enableReadOnlyMode('#pstCnTemp');
    window.editor = editor;
    
    // 폼 제출 전 CKEditor의 내용을 textarea에 동기화
    document.querySelector('#registForm').addEventListener('submit', function(event) {
        document.querySelector('#pstCn').value = editor.getData();
    });
})
.catch(error => {
    console.error(error);
});
</script>

<style>
body {
    margin: 0;
    padding: 0;
    font-family: pretendard;
    background-color: #fff;
}

.container2 {
    width: 1000px;
    margin: 0 auto;
}

h1 {
    font-size: 28px;
    font-weight: bold;
    text-align: left;
    padding-top: 20px;
    color: black;
}

.Content {
    width: 100%;
    height: auto;
    border-radius: 20px;
    margin-top: 30px;
    border-top: 3px solid #24D59E;
    border-bottom: 3px solid #24D59E;
}

.cn-detail {
    margin-left: 20px;
    margin-bottom: 20px;
}

.btn {
   background: white;
   color: #24D59E;
   border: 1px solid #24D59E;
   width: 100px;
   transition: all 0.3s ease 0s;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
   padding: 8px 15px;
    border-radius: 5px;
}

.btn:hover {
   background-color: #24D59E;
   color: white;
}

.button-container {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
}

.button-group-right {
    display: flex;
    gap: 10px; 
    border-bottom: 1px solid #ccc;
    padding: 5px;
}
.comment-item{
	margin-top: 5px;
}
.comment-section {
    margin-top: 30px;
}

.comment-input {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
}

.comment-input textarea {
    width: 90%;
    height: 50px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 8px;
    resize: none;
}

.comment-input button {
    width: 100px;
    height: 50px;
    margin-left: 10px;
    padding: 8px 15px;
    border-radius: 5px;
}

.comment-list {
    border-top: 1px solid #ccc;
    margin-top: 20px;
}

.comment-list .comment-item {
    padding: 10px;
    border-bottom: 1px solid #eee;
    position: relative;
}

.comment-list .comment-item p {
    margin: 0;
}

.btn-replyDel {
    position: absolute;
    right: 0;
    top: 10px;
    background-color: #24D59E;
    color: white;
    border-radius: 8px;
    transition: background-color 0.3s, color 0.3s;
    width: 80px;
    height: 30px;
}

.comment-buttons {
    display: flex;
    gap: 10px;
}

.edit-comment-form {
    display: flex;
    gap: 10px;
    align-items: center;
    margin-top: 5px;
}
.btn-Del{
   width: 100px;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
   padding: 8px 15px;
    border-radius: 5px;
    font-size: 14px;
    background: white;
   color: #232323;
   border: 1px solid #B5B5B5;
   transition: all 0.3s ease 0s;
}
.btn-cancel-edit {
    padding: 5px 10px;
    font-size: 14px;
    height: 30px;
    width: 70px;
    background: white;
   color: #232323;
   border: 1px solid #B5B5B5;
   transition: all 0.3s ease 0s;
}
.btn-report-comment,
.btn-delete-comment,
.btn-edit-comment{
	background-color: white;
	border: none;
	padding: 0;
}

.btn-save-edit{
    padding: 5px 10px;
    font-size: 14px;
    height: 30px;
    width: 70px;
    background: white;
   color: #24D59E;
   border: 1px solid #24D59E;
   transition: all 0.3s ease 0s;
}
.btn-save-edit:hover{
   background-color: #24D59E;
   color: white;
}

.btn-report-comment:hover,
.btn-cancel-edit:hover,
.btn-Del:hover,
.btn-delete-comment:hover,
.btn-edit-comment:hover{
   background: #ECECEC;
   color: #232323;
   border: 1px solid #B5B5B5;
}

.btn-Report {
   background: white;
   color: #24D59E;
   border: 1px solid #24D59E;
   width: 170px;
   transition: all 0.3s ease 0s;
    float: right;
    margin-right: 10px;
}

.btn-Report:hover {
   background-color: #24D59E;
   color: white;
}

.inp_tarea {
    overflow-y: auto;
    margin-top: 20px;
    padding: 10px 12px;
    width: 422px;
    height: 95px;
    border: 1px solid #dbdbdb;
    box-sizing: border-box;
    color: #444;
    font-size: 14px;
    line-height: 18px;
    resize: none;
}

.repotModal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1050;
    background-color: white;
    border-radius: 8px;
    padding: 20px;
    width: 500px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
}
.btn-Report{
	width: auto;
}
hr{
	width:950px;
}
</style>

<div class="container2">
   <header>
      <h1>자유 게시판</h1>
   </header>
   <div class="title-group">
      <div class="content-group">
         <form name="deletePost" id="deletePost"
            action="/common/freeBoard/deletePost" method="post">
            <div class="Content">
                <div class="cn-detail">
                    <p style="font-weight: bold; font-size:30px;margin-bottom: 20px;"><br>[${boardVO.pstOthbcscope}]&nbsp;${boardVO.pstTtl}</p>
					<c:choose>
					    <c:when test="${boardVO.mbrId == 'admin'}">
					    	<c:if test="${boardVO.pstMdfcnDt != null}">
						        <div style="display: flex; justify-content: space-between; width: 100%;">
						            <div>작성자 : ★관리자<br>작성일 : ${boardVO.pstMdfcnDt}(수정함)</div>
						            <div style="margin-right: 20px;margin-top:24px;">조회수 : ${boardVO.pstInqCnt}</div>
						        </div>
					        </c:if>
					    	<c:if test="${boardVO.pstMdfcnDt == null}">
						        <div style="display: flex; justify-content: space-between; width: 100%;">
						            <div>작성자 : ★관리자<br>작성일 : ${boardVO.pstWrtDt}</div>
						            <div style="margin-right: 20px;margin-top:24px;">조회수 : ${boardVO.pstInqCnt}</div>
						        </div>
					        </c:if>
					    </c:when>
					    <c:otherwise>
					    	<c:if test="${boardVO.pstMdfcnDt != null}">
						        <div style="display: flex; justify-content: space-between; width: 100%;">
						            <div>작성자 : ${boardVO.mbrId}<br>작성일 : ${boardVO.pstMdfcnDt}(수정함)</div>
						            <div style="margin-right: 20px;margin-top:24px;">조회수 : ${boardVO.pstInqCnt}</div>
						        </div>
					        </c:if>
					    	<c:if test="${boardVO.pstMdfcnDt == null}">
						        <div style="display: flex; justify-content: space-between; width: 100%;">
						            <div>작성자 : ${boardVO.mbrId}<br>작성일 : ${boardVO.pstWrtDt}</div>
						            <div style="margin-right: 20px;margin-top:24px;">조회수 : ${boardVO.pstInqCnt}</div>
						        </div>
					        </c:if>
					    </c:otherwise>
					</c:choose>
					<c:forEach var="file" items="${fileDetails}">
					    <div class="filelist">
					        <a href="${file.filePathNm}" download="${file.orgnlFileNm}">
					            <i class="fas fa-link mr-1"  style="font-weight:600; font-size:14px;">${file.orgnlFileNm} (${file.fileFancysize})</i>
					        </a>
					    </div>
					</c:forEach>  					
					<hr>
                    <p>${boardVO.pstCn}</p>
                </div>
            </div>
            <!-- 버튼 배치 -->
            <div class="button-container">
               <button type="button" class="btn btn-List"
                  onclick="location.href='/common/freeBoard/freeList'">목록</button>
               <div class="button-group-right">
                  <!-- 로그인하지 않은 경우 버튼 숨기기 -->
                  <c:if test="${prc eq 'anonymousUser'}">
                     <!-- 아무것도 표시하지 않음 -->
                  </c:if>
                  <!-- 로그인한 사용자인 경우 -->
                  <c:if test="${prc ne 'anonymousUser'}">
                     <!-- 로그인한 사용자와 게시글 작성자가 같을 때만 수정/삭제 버튼을 표시 -->
                     <c:if test="${prc ne 'anonymousUser' and prc.username == boardVO.mbrId}">
                         <button type="button" class="btn btn-Del">삭제</button>
                         <button type="button" class="btn btn-Edit" onclick="location.href='/common/freeBoard/freeUpdate?seNo=${boardVO.seNo}&pstSn=${boardVO.pstSn}'">수정</button>
                     </c:if>
                  </c:if>
                  <input type="hidden" id="pstSn" name="pstSn"
                     value="${boardVO.pstSn}" />
               </div>
            </div>
            <sec:csrfInput />
         </form>
      </div>
   </div>
   <!-- 댓글 입력창 및 목록 섹션 -->
   <div class="comment-section">
      <!-- 댓글 입력창 -->
      <form name="replyRegistPost" id="replyRegistPost"
         action="/common/freeBoard/registReplyPost" method="post">
         <div class="comment-input">
            <input type="text" id="commentContent" name="commentContent" class="form-control ck-blurred" placeholder="댓글을 입력하세요" rows="5">
            <button type="submit" id="submitComment" class="btn btn-Regist">등록</button>
         </div>
         <sec:csrfInput />
         <input type="hidden" id="pstSn" name="pstSn" value="${boardVO.pstSn}" />
      </form>

      <!-- 댓글 목록 -->
      <div id="commentsList">
         <c:if test="${empty commentsList}">
            <p>댓글이 없습니다.</p>
         </c:if>
         <c:forEach var="comment" items="${commentsList}">
            <div class="comment-item" data-cmnt-no="${comment.cmntNo}">
                 <p>
                     <c:choose>
                         <c:when test="${comment.mbrId == 'admin'}">
                             <strong style="background-color:  rgba(36, 213, 158, 0.11);">★관리자</strong>(${comment.cmntRegDt})
                         </c:when>
                         <c:otherwise>
                             <strong>${comment.mbrId}</strong>(${comment.cmntRegDt})
                         </c:otherwise>
                     </c:choose>
                 </p>
               <div class="button-group-right">
                  <p class="comment-content">${comment.cmntCn}</p>
                  <!-- 로그인하지 않은 경우 버튼 숨기기 -->
                  <c:if test="${prc eq 'anonymousUser'}">
                     <!-- 아무것도 표시하지 않음 -->
                  </c:if>
                  <!-- 로그인한 사용자인 경우 -->
                  <c:if test="${prc ne 'anonymousUser'}">
                     <!-- 로그인한 사용자와 댓글 작성자가 같을 때만 수정/삭제 버튼을 표시 -->
                     <c:if test="${prc.username == comment.mbrId}">
                        <div class="comment-buttons">
                           <button type="button" class="btn-delete-comment"
                              data-id="${comment.cmntNo}"><img src="${pageContext.request.contextPath}/resources/icon/Del_icon.png" alt="삭제" style="width: 20px; height: 20px;"></button>
                           <button type="button" class="btn-edit-comment"
                              data-id="${comment.cmntNo}"><img src="${pageContext.request.contextPath}/resources/icon/Edit_icon.png" alt="수정" style="width: 20px; height: 20px;"></button>
                        </div>
                     </c:if>
                     <c:if test="${prc.username != comment.mbrId && comment.mbrId != 'admin'}">
                        <div class="comment-buttons">
                           <button type="button" class="btn-report-comment"
                              data-id="${comment.cmntNo}"><img src="${pageContext.request.contextPath}/resources/icon/Warn_icon.png" alt="신고" style="width: 20px; height: 20px;"></button>
                        </div>
                     </c:if>
                  </c:if>
               </div>


               <!-- 댓글 수정 폼-->
               <div class="edit-comment-form" style="display: none;">
                  <input type="text" class="edit-comment-text"
                     value="${comment.cmntCn}">
                  <button type="button" class="btn btn-cancel-edit">취소</button>
                  <button type="button" class="btn btn-save-edit">저장</button>
               </div>
            </div>
         </c:forEach>
      </div>
   </div>
   <!--게시글 신고 -->
   <div id="repotModal" class="modal fade" tabindex="-1" role="dialog">
       <div class="modal-dialog" role="document">
           <div class="modal-content">
               <div class="modal-header">
                   <h5 class="modal-title" style="color:black">게시글 신고</h5>
                   <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                       <span aria-hidden="true">&times;</span>
                   </button>
               </div>
               <div class="modal-body">
                   <c:forEach var="codeVO" items="${codeVOList}">
                       <p><input type="radio" name="radio" style="margin-left: 1px;">
                       <label for="select" class="dclrTp" >&nbsp;${codeVO.comCodeNm}</label></p>
                   </c:forEach>
                   <textarea name="report_contents" id="dclrCn" class="inp_tarea dclrCn" title="신고내용 입력" placeholder="내용을 입력해주세요" rows="5" cols="54"></textarea>
               </div>
               <div class="modal-footer">
                   <button type="button" class="btn btn-secondary dclr-btn" data-dismiss="modal">접수</button>
               </div>
           </div>
       </div>
   </div>
   <!--댓글 신고 -->
   <div id="replyReportModal" class="modal fade" tabindex="-1" role="dialog">
       <div class="modal-dialog" role="document">
           <div class="modal-content">
               <div class="modal-header">
                   <h5 class="modal-title" style="color:black">댓글 신고</h5>
                   <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                       <span aria-hidden="true">&times;</span>
                   </button>
               </div>
               <div class="modal-body">
                   <c:forEach var="codeVO" items="${codeVOList}">
                       <p><input type="radio" name="radio" style="margin-left: 1px;">
                       <label for="select" class="dclrTp2" >&nbsp;${codeVO.comCodeNm}</label></p>
                   </c:forEach>
                   <textarea name="report_contents" id="dclrCn2" class="inp_tarea dclrCn" title="신고내용 입력" placeholder="내용을 입력해주세요" rows="5" cols="54"></textarea>
               </div>
               <div class="modal-footer">
                   <button type="button" class="btn btn-secondary dclr-reply-btn" data-dismiss="modal">접수</button>
               </div>
           </div>
       </div>
   </div>
</div>
<script type="text/javascript">
function handleImg(e){
   //    e.target : <input type="file" class="custom-file-input" id="uploadFile" ... /> 
   let files = e.target.files; // 선택한 파일들
   // 파일들을 잘라서 배열로 만든다
   // fileArr = [토낑.gif,굿.gif,라쿤.gif]
   let fileArr = Array.prototype.slice.call(files);
   // f : 토낑.gif 객체
   let accumStr = ""; 
   fileArr.forEach(function(f){
      // 이미지가 아니면
      if(!f.type.match("image.*")){
         alert("이미지 확장자만 가능합니다");
         return; // 함수 자체가 종료됨
      }
      // 이미지가 맞다면 => 파일을 읽어주는 객체 생성
      let reader = new FileReader();
      // 파일을 읽자
      // e : reader가 이미지 객체를 읽는 이벤트
      reader.onload = function(e){// "+e.target+result+" - 이미지를 다 읽었으면 결과를 가져와라 -> 그것을 누적
         accumStr += "<img src='"+e.target.result+"'/>";  // 누적 String
         $("#pImg").html(accumStr);
      }
      reader.readAsDataURL(f);
      
   });
   // 요소.append : 누적, 요소.html : 새로고침, 요소.innerHTML : J/S에서 새로고침
}
$(document).ready(function(){
    $('.btn-Del').on('click', function() {
        Swal.fire({
            title: '게시글을 삭제하시겠습니까?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: '삭제',
            cancelButtonText: '취소',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                $('#deletePost').submit();
            }
        });
    });
    $('.btn-Regist').on('click', function(event) {
        var prcUsername = '${prc != "anonymousUser" ? prc.username : "anonymousUser"}';

        if (prcUsername === "anonymousUser") {
            event.preventDefault(); // 기본 폼 제출 막기
            Swal.fire({
                title: '로그인 후 작성 할 수 있습니다.?',
                text: "로그인 페이지로 이동하시겠습니까?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: '이동',
                cancelButtonText: '취소',
                reverseButtons: true,
                
              }).then((result) => {
                if (result.isConfirmed) {
                  window.location.href = "/security/login"
                }
              })
            return;
        }
    });
   $(document).on("click", '.close', function() {
       $(this).closest('.modal').modal('hide');
   });

    $(document).on("click", '.btn-Report', function() {
        var prcUsername = '${prc != "anonymousUser" ? prc.username : "anonymousUser"}';

        if (prcUsername === "anonymousUser") {
            Swal.fire({
                title: '로그인 후 신고 할 수 있습니다.?',
                text: "로그인 페이지로 이동하시겠습니까?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: '이동',
                cancelButtonText: '취소',
                reverseButtons: true,
                
              }).then((result) => {
                if (result.isConfirmed) {
                  window.location.href = "/security/login"
                }
              })
            return;
        }else{
             $('#repotModal').modal('show');
        }
   });
    $(document).on("click", '.dclr-btn', function() {
        const dclrTp = $('input[type="radio"]:checked').next('.dclrTp').text(); 
        const dclrCn = $('#dclrCn').val(); 
        const pstSn = $('#pstSn').val(); 
        const mbrId = '${boardVO.mbrId}'; 
        //관리자 url로 변환시키자
          const currentUrl = window.location.href;  
          const urlParams = new URLSearchParams(window.location.search);
          
          // 관리자용 URL을 생성
          const dclrUrl = 'http://localhost/adm/freeBoard/admFreeDetail?seNo=3&pstSn=' + pstSn;
        if (!dclrTp || !dclrCn) {
            Swal.fire({
                icon: 'info',
                title: '신고 유형과 내용을 입력해주세요',
              });
            return;
        }

        $.ajax({
            url: '/common/freeBoard/boardReport',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                dclrTp: dclrTp,
                dclrCn: dclrCn,
                dclrUrl: dclrUrl,
                pstSn: pstSn, 
                mbrId: mbrId
            }),
            beforeSend: function(xhr) {
                xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
            },
            success: function(response) {
                if (response === "success") {
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'center-center',
                        showConfirmButton: false,
                        timer: 1500,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                          toast.addEventListener('mouseenter', Swal.stopTimer),
                          toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                      })

                      Toast.fire({
                        icon: 'success',
                        title: '신고가 접수되었습니다.'
                      })
                    $('#repotModal').modal('hide'); 
                } else {
                    alert("신고 접수 실패.");
                }
            },
            error: function(xhr, status, error) {
                alert("신고 접수 중 오류 발생: " + error);
            }
        });
    });

   $(document).on("click", '.btn-report-comment', function() {
       const commentItem = $(this).closest('.comment-item');  
       const mbrId = commentItem.find('strong').text().trim(); 
       console.log("mbrId: " + mbrId);
       $('#mbrId').val(mbrId);  
       $('#replyReportModal').modal('show');
         //댓글신고접수
         $(document).on("click", '.dclr-reply-btn', function() {
             const dclrTp = $('input[type="radio"]:checked').next('.dclrTp2').text();
             const dclrCn = $('#dclrCn2').val();  
             const pstSn = $('#pstSn').val();  
             // 기존 URL을 변환하는 로직
             const currentUrl = window.location.href;  
             const urlParams = new URLSearchParams(window.location.search);
             const dclrUrl = 'http://localhost/adm/freeBoard/admFreeDetail?seNo=3&pstSn=' + pstSn;

              console.log("pstSn: ", pstSn);
              console.log("mbrId: ", mbrId);
             if (!dclrTp || !dclrCn) {
 	            Swal.fire({
	                icon: 'info',
	                title: '신고 유형과 내용을 입력해주세요',
	              });
                 return;
             }
         
             $.ajax({
                 url: '/common/freeBoard/replyReport',
                 type: 'POST',
                 contentType: 'application/json',
                 data: JSON.stringify({
                     dclrTp: dclrTp,
                     dclrCn: dclrCn,
                     dclrUrl: dclrUrl,
                     pstSn: pstSn,
                     mbrId: mbrId
                 }),
                 beforeSend: function(xhr) {
                     xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
                 },
                 success: function(response) {
                     if (response === "success") {
	                      Toast.fire({
		                        icon: 'success',
		                        title: '신고가 접수되었습니다.'
		                      })
                         $('#replyReportModal').modal('hide'); // 모달 창 닫기
                     } else {
                         alert("신고 접수 실패.");
                     }
                 },
                 error: function(xhr, status, error) {
                     alert("신고 접수 중 오류 발생: " + error);
                 }
             });
         });
   });
   // 댓글 수정 버튼 클릭 시
   $(document).on("click", '.btn-edit-comment', function() {
       const commentItem = $(this).closest('.comment-item');
       commentItem.find('.comment-content').hide(); // 댓글 내용 숨기기
       commentItem.find('.edit-comment-form').show(); // 수정 폼 표시하기
       commentItem.find('.btn-edit-comment').hide(); 
       commentItem.find('.btn-delete-comment').hide(); 
   });
   // 댓글 수정 취소 버튼 클릭 시
   $(document).on("click", '.btn-cancel-edit', function() {
       const commentItem = $(this).closest('.comment-item');
       commentItem.find('.comment-content').show(); // 댓글 내용 표시
       commentItem.find('.edit-comment-form').hide(); // 수정 폼 숨기기
       commentItem.find('.btn-edit-comment').show(); 
       commentItem.find('.btn-delete-comment').show(); 
   });
    // 댓글 수정 저장 버튼 클릭 시
    $(document).on("click", '.btn-save-edit', function() {
        const commentItem = $(this).closest('.comment-item');
        commentItem.find('.comment-content').show(); // 댓글 내용 표시
        commentItem.find('.edit-comment-form').hide(); // 수정 폼 숨기기
        commentItem.find('.btn-edit-comment').show(); 
        commentItem.find('.btn-delete-comment').show(); 
        const cmntNo = commentItem.data('cmnt-no');
        const pstSn = $('#pstSn').val();
        const cmntCn = commentItem.find('.edit-comment-text').val();

        $.ajax({
            url: '/common/freeBoard/updateComment',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                cmntNo: cmntNo,
                pstSn: pstSn,
                cmntCn: cmntCn
            }),
            beforeSend: function(xhr) {
                xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
            },
            success: function(response) {
                if (response === "success") {
                    commentItem.find('.comment-content').text(cmntCn).show(); 
                    commentItem.find('.edit-comment-form').hide();
                } else {
                    alert('댓글 수정 실패');
                }
            },
            error: function(xhr, status, error) {
                alert('댓글 수정 실패: ' + error);
            }
        });
    });

    // 댓글 삭제 버튼 클릭 시
 // 댓글 삭제 버튼 클릭 시
    $(document).on("click", '.btn-delete-comment', function() {
        const cmntNo = $(this).data('id');
        const pstSn = $('#pstSn').val();

        // SweetAlert로 확인 창 표시
        Swal.fire({
            title: '댓글을 삭제하시겠습니까?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: '삭제',
            cancelButtonText: '취소',
            reverseButtons: true, // 버튼 순서 거꾸로
        }).then((result) => {
            if (result.isConfirmed) {
                // 삭제 요청 진행
                $.ajax({
                    url: '/common/freeBoard/deleteComment',
                    type: 'POST',
                    data: {
                        cmntNo: cmntNo,
                        pstSn: pstSn
                    },
                    beforeSend: function(xhr) {
                        xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
                    },
                    success: function(response) {
                        if (response === "success") {
                            // 삭제 성공 시 알림 표시
                            Swal.fire(
                                '댓글이 삭제되었습니다.',
                                '',
                                'success'
                            ).then(() => {
                                location.reload(); // 댓글 삭제 후 목록 갱신
                            });
                        } else {
                            Swal.fire(
                                '삭제 실패',
                                '댓글 삭제 중 오류가 발생했습니다.',
                                'error'
                            );
                        }
                    },
                    error: function(xhr, status, error) {
                        Swal.fire(
                            '삭제 실패',
                            '댓글 삭제 중 오류가 발생했습니다.',
                            'error'
                        );
                    }
                });
            }
        });
    });

});

ClassicEditor.create(document.querySelector('#pstCnTemp'))
    .then(editor => {
        editor.enableReadOnlyMode('#pstCnTemp');
        window.editor = editor;
        
        // 폼 제출 전 CKEditor의 내용을 textarea에 동기화
        document.querySelector('#registForm').addEventListener('submit', function(event) {
            document.querySelector('#pstCn').value = editor.getData();
        });
    })
    .catch(error => {
        console.error(error);
    });
</script>

