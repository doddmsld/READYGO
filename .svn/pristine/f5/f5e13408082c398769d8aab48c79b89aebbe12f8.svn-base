package kr.or.ddit.api;



import java.io.IOException;
import java.util.Map;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import lombok.extern.slf4j.Slf4j;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

@Slf4j
@Controller
@RequestMapping("/video")
public class VideoController {
	
	@GetMapping("/home")
	public String videoHome(Model model) throws Exception{
		OkHttpClient client = new OkHttpClient();
		
		
		//목록 조회
		Request request = new Request.Builder()
		  .url("https://openapi.gooroomee.com/api/v1/room/list?page=1&limit=10&sortCurrJoinCnt=true")
		  .get()
		  .addHeader("accept", "application/json")
		  .addHeader("X-GRM-AuthToken", "12056163501988613cf51b7b51cdd8140bb172761d02211a8b")
		  .build();

		Response response = client.newCall(request).execute();
		JSONObject jsonObj;
		try {
		    JSONParser jsonParser = new JSONParser();
		    Object obj = jsonParser.parse(response.body().string());
		    jsonObj = (JSONObject) obj;

		    log.info("jsonObj: " + jsonObj);
		} finally {
		    response.close();  // 명시적으로 응답을 닫음
		}
		model.addAttribute("roomList",jsonObj);
		
		return "video/video";
	}
	
	@PostMapping("/createroom")
	@ResponseBody
	public JSONObject createroom(@RequestBody Map<String,Object> value) throws Exception{
		String roomName = value.get("value").toString();
		String roomUrl = value.get("val").toString();
		
		
		//방 생성
		OkHttpClient client = new OkHttpClient();

		MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
		okhttp3.RequestBody body = okhttp3.RequestBody.create(mediaType, "callType=P2P&liveMode=false&maxJoinCount=4&liveMaxJoinCount=100&layoutType=4&roomTitle="+roomName+"&durationMinutes=3000&roomUrlId="+roomUrl);
		Request request = new Request.Builder()
		  .url("https://openapi.gooroomee.com/api/v1/room")
		  .post(body)
		  .addHeader("accept", "application/json")
		  .addHeader("content-type", "application/x-www-form-urlencoded")
		  .addHeader("X-GRM-AuthToken", "12056163501988613cf51b7b51cdd8140bb172761d02211a8b")
		  .build();

		Response response = client.newCall(request).execute();
		log.info("response"+response);
		
		//목록 조회
		client = new OkHttpClient();
		request = new Request.Builder()
		  .url("https://openapi.gooroomee.com/api/v1/room/list?page=1&limit=10&sortCurrJoinCnt=true")
		  .get()
		  .addHeader("accept", "application/json")
		  .addHeader("X-GRM-AuthToken", "12056163501988613cf51b7b51cdd8140bb172761d02211a8b")
		  .build();

		JSONObject jsonObj;
		response = client.newCall(request).execute();
		try {
		    JSONParser jsonParser = new JSONParser();
		    Object obj = jsonParser.parse(response.body().string());
		     jsonObj = (JSONObject) obj;

		    log.info("jsonObj: " + jsonObj);
		} finally {
		    response.close();  // 명시적으로 응답을 닫음
		}
		return jsonObj;
	}
	
	@PostMapping("/deleteroom")
	@ResponseBody
	public JSONObject deleteroom(@RequestBody Map<String,Object> value) throws Exception{
		String roomName = value.get("value").toString();
		
		//방 삭제
		OkHttpClient client = new OkHttpClient();

		Request request = new Request.Builder()
		  .url("https://openapi.gooroomee.com/api/v1/room/"+roomName)
		  .delete(null)
		  .addHeader("accept", "application/json")
		  .addHeader("X-GRM-AuthToken", "12056163501988613cf51b7b51cdd8140bb172761d02211a8b")
		  .build();

		Response response = client.newCall(request).execute();
		
		//목록 조회
		client = new OkHttpClient();
		request = new Request.Builder()
		  .url("https://openapi.gooroomee.com/api/v1/room/list?page=1&limit=10&sortCurrJoinCnt=true")
		  .get()
		  .addHeader("accept", "application/json")
		  .addHeader("X-GRM-AuthToken", "12056163501988613cf51b7b51cdd8140bb172761d02211a8b")
		  .build();
		JSONObject jsonObj;
		response = client.newCall(request).execute();
		try {
		    JSONParser jsonParser = new JSONParser();
		    Object obj = jsonParser.parse(response.body().string());
		     jsonObj = (JSONObject) obj;

		    log.info("jsonObj: " + jsonObj);
		} finally {
		    response.close();  // 명시적으로 응답을 닫음
		}
		return jsonObj;
	}
	
	
	@PostMapping("/connectroom")
	@ResponseBody
	public JSONObject connectroom(@RequestBody Map<String,Object> value) throws Exception{
		String roomName = value.get("value").toString();
		
		//접속 경로 생성
		OkHttpClient client = new OkHttpClient();

		MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
		okhttp3.RequestBody body = okhttp3.RequestBody.create(mediaType, "roleId=participant&apiUserId=gooroomee-tester&ignorePasswd=false&roomId="+roomName+"&username=seo");
		Request request = new Request.Builder()
		  .url("https://openapi.gooroomee.com/api/v1/room/user/otp/url")
		  .post(body)
		  .addHeader("accept", "application/json")
		  .addHeader("content-type", "application/x-www-form-urlencoded")
		  .addHeader("X-GRM-AuthToken", "12056163501988613cf51b7b51cdd8140bb172761d02211a8b")
		  .build();
		JSONObject jsonObj;
		Response response = client.newCall(request).execute();
		try {
		    JSONParser jsonParser = new JSONParser();
		    Object obj = jsonParser.parse(response.body().string());
		    jsonObj = (JSONObject) obj;

		    log.info("jsonObj: " + jsonObj);
		} finally {
		    response.close();  // 명시적으로 응답을 닫음
		}
		
		return jsonObj;
	}
	
	
}
