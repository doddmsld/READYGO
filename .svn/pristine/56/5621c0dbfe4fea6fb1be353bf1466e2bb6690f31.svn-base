package kr.or.ddit.controller_DO;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import kr.or.ddit.mapper.AdminMapper;
import kr.or.ddit.mapper.UserMapper;
import kr.or.ddit.service_DO.AdminService;
import kr.or.ddit.util.ArticlePage;
import kr.or.ddit.util.ArticlePage;
import kr.or.ddit.vo.BoardVO;
import kr.or.ddit.vo.CodeGrpVO;
import kr.or.ddit.vo.CodeVO;
import kr.or.ddit.vo.CommentVO;
import kr.or.ddit.vo.DeclarationVO;
import kr.or.ddit.vo.EnterVO;
import kr.or.ddit.vo.MemberVO;
import lombok.extern.slf4j.Slf4j;

@RequestMapping("/adm")
@Slf4j
@Controller
public class AdmController {

	@Autowired
	UserMapper userMapper;
	
	@Inject
	AdminMapper adminMapper;
	
	@Inject
	AdminService adminService;
	
	@GetMapping("/main")
	public String main() {
		return null;
	}
	//회원관리페이지
	@GetMapping("/memManage")
	public String memManage(Model model) {
	    List<MemberVO> memberVOList = adminService.memOrgList(); 
	    model.addAttribute("memberVOList", memberVOList); 
	    return "adm/memManage"; 
	}

	//회원리스트
	@GetMapping("/memList")
	public ResponseEntity<?> getMember(@RequestParam("currentPage") int currentPage,
				            			@RequestParam("searchKeyword") String searchKeyword) {
			Map<String, Object> memMap = new HashMap<>();
			memMap.put("currentPage", currentPage);
			memMap.put("searchKeyword", "%" + searchKeyword + "%");
			int memTotal = adminService.memTotal(memMap);
			List<MemberVO> memberVOList = adminService.memList(memMap);
			ArticlePage<MemberVO> page = new ArticlePage<>(memTotal, currentPage, 10, memberVOList);
			
			return ResponseEntity.ok(page);
	}
//	//기업리스트
//	public ResponseEntity<?> getEnter(@RequestParam("currentPage") int currentPage,
//			@RequestParam("searchKeyword") String searchKeyword) {
//		Map<String, Object> entMap = new HashMap<>();
//		entMap.put("currentPage", currentPage);
//		entMap.put("searchKeyword", "%" + searchKeyword + "%"); 
//		int entTotal = this.adminService.entTotal(entMap);
//		List<EnterVO> enterVOList = this.adminService.enterList(entMap);
//		ArticlePage<EnterVO> page = new ArticlePage<>(entTotal, currentPage, 10, enterVOList);
//		
//		return ResponseEntity.ok(page);
//	}
//	//신고리스트
//	public ResponseEntity<?> getReport(@RequestParam("currentPage") int currentPage,
//			@RequestParam("searchKeyword") String searchKeyword) {
//		Map<String, Object> reportMap = new HashMap<>();
//		reportMap.put("currentPage", currentPage);
//		reportMap.put("searchKeyword", "%" + searchKeyword + "%"); 
//		int reportTotal = this.adminService.reportTotal(reportMap);
//		List<DeclarationVO> declarationVOList = this.adminService.reportList(reportMap);
//		ArticlePage<DeclarationVO> page = new ArticlePage<>(reportTotal, currentPage, 10, declarationVOList);
//		
//		return ResponseEntity.ok(page);
//	}
	
	@GetMapping("/entApproval")
	public String entApproval(Model model) {
		List<EnterVO> entVOList = this.adminService.enterList();
		
		model.addAttribute("entVOList",entVOList);
		return "adm/entApproval";
	}
	
	@PostMapping("/entOk")
	@ResponseBody
	public int entOk(@RequestParam("entId") String entId) {
	    return adminService.entOk(entId); // 승인 처리
	}


	@PostMapping("/entNo")
	@ResponseBody
	public String entNo(@RequestParam("entId") String entId) {
	    return adminService.entNo(entId) > 0 ? "success" : "fail"; // 거절 처리
	}
	
	@GetMapping("/enterDetail")
	@ResponseBody
	public EnterVO getEnterDetail(@RequestParam("entId") String entId) {
	    // 쿼리를 실행하여 엔터프라이즈 상세 정보를 가져옴
	    EnterVO enterDetail = adminMapper.enterDetail(entId);
	    return enterDetail;
	}



	
	//코드관리 사이트
	@GetMapping("/codeManage")
	public ModelAndView codeManage(
	    @RequestParam(value="comCodeGrp", required=false, defaultValue="") String comCodeGrp,
	    @RequestParam(value="comCodeGrpNm", required=false, defaultValue="") String comCodeGrpNm,
	    @RequestParam(value="comCodeGrpDesc", required=false, defaultValue="") String comCodeGrpDesc,
	    @RequestParam(value="currentPage", required=false, defaultValue="1") int currentPage,
	    @RequestParam(value="searchKeyword", required=false, defaultValue="") String searchKeyword,
	    ModelAndView mav) {
	    
	    Map<String, Object> map = new HashMap<>();
	    map.put("currentPage", currentPage);
	    map.put("searchKeyword", "%" + searchKeyword + "%"); 
	    map.put("comCodeGrp", comCodeGrp);
	    map.put("comCodeGrpNm", comCodeGrpNm);
	    map.put("comCodeGrpDesc", comCodeGrpDesc);

	    // 전체 공통 코드 목록을 조회하여 comCodeGrp
	    List<CodeVO> codeGrpVOList = adminMapper.codeAllSelect(map);
	    mav.addObject("codeGrpVOList", codeGrpVOList);

	    // 선택한 comCodeGrp에 해당하는 데이터를 필터링하여 가져옴 (페이징 포함)
	    List<CodeVO> filteredCodeList = adminMapper.codeSelect(map); 
	    mav.addObject("filteredCodeList", filteredCodeList);

	    int total = this.adminService.getTotal(map);
	    
	    // 검색 키워드를 포함한 페이징 처리
	    ArticlePage<CodeVO> articlePage = new ArticlePage<>(total, currentPage, 10, filteredCodeList, comCodeGrp);
	    
	    mav.addObject("articlePage", articlePage);
	    mav.setViewName("adm/codeManage");

	    return mav;
	}

	@GetMapping("/getFilteredCodes")
	@ResponseBody
	public Map<String, Object> getFilteredCodes(@RequestParam("comCodeGrp") String comCodeGrp, @RequestParam("currentPage") int currentPage) {
	    Map<String, Object> result = new HashMap<>();

	    // 선택된 comCodeGrp에 해당하는 코드 필터링
	    Map<String, Object> paramMap = new HashMap<>();
	    paramMap.put("comCodeGrp", comCodeGrp);
	    paramMap.put("currentPage", currentPage);
	    
	    List<CodeVO> filteredCodeList = adminMapper.codeSelect(paramMap);
	    result.put("filteredCodeList", filteredCodeList);
	    
	    return result;
	}

	 //그룹코드추가
	 @PostMapping("/codeGrpAdd")
    public String codeGrpAdd(@ModelAttribute CodeGrpVO codeGrpVO) {

		 int result = this.adminService.codeGrpAdd(codeGrpVO);

        return "redirect:/adm/codeManage";
    }
	 
	 //그룹코드 삭제
	 @PostMapping("/codeGrpDel")
    public String codeGrpDel(@ModelAttribute CodeGrpVO codeGrpVO) {
		 
		 int result = this.adminService.codeGrpDel(codeGrpVO);

        return "redirect:/adm/codeManage";
    }

	 //코드추가
	 @PostMapping("/codeAdd")
	 public String codeAdd(@ModelAttribute CodeVO codeVO) {

		 int result = this.adminService.codeAdd(codeVO);
				 
     return "redirect:/adm/codeManage";
	 }

	 //코드삭제
	 @PostMapping("/codeDel")
	 @ResponseBody
	 public String codeDel(@RequestParam("comCode") String comCode) {
	     // 서비스 호출하여 코드 삭제
	     int result = adminService.codeDel(comCode);

	     return result > 0 ? "success" : "fail";
	 }



}
