package kr.or.ddit.security;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.mapper.UserMapper;
import kr.or.ddit.service.LoginService;
import kr.or.ddit.vo.CodeVO;
import kr.or.ddit.vo.MemberVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/security")
public class LoginController {
	
	//<security:form-login login-page="/login" />
	//요청URI : /login
	//요청방식 : get
	//오류 메시지와 로그아웃 메시지를 파라미터로 사용해보자(없을 수도 있음)
	
	@Autowired
	LoginService loginService;
	
	@Autowired
	UserMapper userMapper;
	
	@Autowired
	BCryptPasswordEncoder bcryptPasswordEncoder;
	
	
	@GetMapping("/login")
	public String loginForm(String error, String logout, Model model) {
		log.info("error : " + error);
		log.info("logout : " + logout);
		log.info("logout : " + model);
		
		if(error != null) {
			model.addAttribute("error", "Login Error");
		}
		
		if(logout != null) {
			model.addAttribute("logout", "Logout!!");
		}
		//forwarding
		return "security/loginForm";
	}
	
	@GetMapping("/memSignin")
	public String memSignIn(Model model) {
		log.info("회원가입 페이지에 왔다");
		List<CodeVO> codeVOList = userMapper.codeSelect("GEND");
		//forwarding
		model.addAttribute("codeVOList", codeVOList);
		return "security/memSignin";
	}
	
	@GetMapping("/signin")
	public String signin(Model model) {
		log.info("회원가입 페이지에 왔다");
		List<CodeVO> codeVOList = userMapper.codeSelect("GEND");
		//forwarding
		model.addAttribute("codeVOList", codeVOList);
		return "security/signin";
	}
	
	@ResponseBody
	@PostMapping("/idChkAjax")
	public boolean idChkAjax(@RequestBody String username) {
		log.info("아이디 체크 => " + username);
		boolean chk = true;
		int result = loginService.idChk(username);
		if(result > 0) chk = false;
		//forwarding
		return chk;
	}
	
	@ResponseBody
	@PostMapping("/memSigninPostAjax")
	public String memSigninPost(@ModelAttribute MemberVO memVO,
			Model model) {
		log.info("memVO => " + memVO);
		String encodePWd = bcryptPasswordEncoder.encode(memVO.getMbrPswd());
		memVO.setMbrPswd(encodePWd);
		int result = userMapper.insertMember(memVO);
		
		//forwarding
		return memVO.getMbrId();
	}
	
	@GetMapping("/entSignin")
	public String entSignIn() {
		log.info("회원가입 페이지에 왔다");
		
		//forwarding
		return "security/entSignin";
	}
	
	
}
